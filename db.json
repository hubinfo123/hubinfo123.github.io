{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/download.png","path":"images/download.png","modified":1,"renderable":0},{"_id":"source/images/iconfont.png","path":"images/iconfont.png","modified":1,"renderable":0},{"_id":"source/images/electron1.png","path":"images/electron1.png","modified":1,"renderable":0},{"_id":"source/images/name.png","path":"images/name.png","modified":1,"renderable":0},{"_id":"source/images/star.png","path":"images/star.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/images/name.png","hash":"5aef8b75b2c9b6a81726a24fa538dd0e687ed1af","modified":1674890015162},{"_id":"source/images/star.png","hash":"2ce1c7b49cda354f405e003949c73f5340bc36ed","modified":1674890015163},{"_id":"source/.DS_Store","hash":"a5d0d5a2556bd10802e2351962d6ef26dd00772e","modified":1674893454364},{"_id":"source/_posts/download.md","hash":"5808461a7259c4a73f24f8c4f791b3a6be5b9519","modified":1674890015155},{"_id":"source/_posts/electron1.md","hash":"c29c2d4bb6f446d83c773fd7413ef32d82ee668e","modified":1674890015156},{"_id":"source/_posts/element-rate.md","hash":"a4b155ebf1dad843abc8deac834c75d9921186c6","modified":1674890015156},{"_id":"source/_posts/four.md","hash":"baed4592985cd65001e499d71de67a045e03d8df","modified":1674890015156},{"_id":"source/_posts/.DS_Store","hash":"620234d06b753a9fce9725654fe86a1f57378599","modified":1674890216402},{"_id":"source/_posts/five.md","hash":"cb45505216124fed522fb22d94a502c1d3a50d23","modified":1674890015156},{"_id":"source/_posts/let.md","hash":"7d2044cb7b2ae7b9c0ffba877d8902cdf20b4793","modified":1674890015157},{"_id":"source/_posts/one.md","hash":"cf025b90122834cb73263bfa20f9b563193f5918","modified":1674890015157},{"_id":"source/_posts/two.md","hash":"73a98d50becce04e275d21da7979b8ec1960115b","modified":1674890015157},{"_id":"source/_posts/hello-world.md","hash":"8a02bd504c54e5214404b85ef9b48acec868bdb2","modified":1674890015157},{"_id":"source/images/download.png","hash":"50a170eaf38251b6854b7d79077c6944cfe8dba7","modified":1674890015159},{"_id":"source/images/electron1.png","hash":"860e1f3539ee34fa8ddb59271131ec32e46cda54","modified":1674890015160},{"_id":"source/images/iconfont.png","hash":"53d0de7bc61a361612d7573c7e170726244202ff","modified":1674890015161},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1674890015168},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1674890015164},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1674890015164},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1674890015168},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1674890015169},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1674890015169},{"_id":"themes/next/_config.yml","hash":"2de9c45f72b19e744430d794510e85a4b4adcabd","modified":1674890015170},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1674890015170},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1674890015164},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1674890015201},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1674890015164},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1674890015169},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1674890015166},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1674890015166},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1674890015177},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1674890015166},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1674890015167},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1674890015167},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1674890015167},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1674890015167},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1674890015168},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1674890015163},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1674890015168},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1674890015170},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1674890015171},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1674890015171},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1674890015171},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1674890015171},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1674890015172},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1674890015172},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1674890015172},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1674890015172},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1674890015177},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1674890015177},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1674890015177},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1674890015177},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1674890015178},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1674890015178},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1674890015178},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1674890015178},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1674890015178},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1674890015179},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1674890015179},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1674890015179},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1674890015179},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1674890015180},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1674890015179},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1674890015180},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1674890015180},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1674890015180},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1674890015181},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1674890015181},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1674890015181},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1674890015200},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1674890015182},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1674890015181},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1674890015200},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1674890015200},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1674890015201},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1674890015206},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1674890015201},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1674890015201},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1674890015166},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1674890015165},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1674890015173},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1674890015165},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1674890015165},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1674890015173},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1674890015174},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1674890015173},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1674890015174},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1674890015174},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1674890015175},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1674890015175},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1674890015175},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1674890015176},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1674890015182},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1674890015176},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1674890015176},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1674890015176},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1674890015183},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1674890015183},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1674890015186},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e5a2bdf45fde7cea9cb03993f5a0fd960326ed5d","modified":1674890015184},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1674890015183},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1674890015187},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1674890015190},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1674890015190},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1674890015190},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1674890015192},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1674890015191},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1674890015192},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1674890015194},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1674890015198},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1674890015196},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1674890015197},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1674890015229},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1674890015229},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1674890015224},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1674890015229},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1674890015229},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1674890015209},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1674890015230},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1674890015229},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1674890015230},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1674890015230},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1674890015230},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1674890015230},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1674890015231},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1674890015231},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1674890015232},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1674890015231},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1674890015231},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1674890015232},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1674890015232},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1674890015232},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1674890015204},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1674890015205},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1674890015205},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1674890015205},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1674890015232},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1674890015233},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1674890015202},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1674890015205},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1674890015206},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1674890015206},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1674890015206},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1674890015207},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1674890015207},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1674890015207},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1674890015207},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1674890015208},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1674890015208},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1674890015208},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1674890015208},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1674890015209},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1674890015209},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1674890015205},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1674890015233},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1674890015184},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1674890015186},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1674890015184},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1674890015186},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1674890015185},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1674890015185},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1674890015185},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1674890015185},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1674890015186},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1674890015187},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1674890015188},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1674890015187},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1674890015188},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1674890015189},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1674890015188},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1674890015189},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1674890015189},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1674890015189},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1674890015191},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1674890015191},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1674890015191},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1674890015192},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1674890015192},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1674890015193},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1674890015193},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1674890015194},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1674890015194},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1674890015194},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1674890015193},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1674890015195},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1674890015195},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1674890015196},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1674890015195},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1674890015195},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1674890015196},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1674890015197},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1674890015196},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1674890015197},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1674890015198},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1674890015198},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1674890015198},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1674890015199},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1674890015199},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1674890015199},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1674890015199},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1674890015200},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1674890015200},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1674890015199},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1674890015228},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1674890015228},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1674890015228},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1674890015228},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1674890015228},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1674890015232},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1674890015233},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1674890015203},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1674890015203},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1674890015203},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1674890015203},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1674890015203},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1674890015204},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1674890015204},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1674890015202},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1674890015202},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1674890015204},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1674890015235},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1674890015202},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1674890015235},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1674890015210},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1674890015210},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1674890015215},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1674890015210},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1674890015221},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1674890015221},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1674890015222},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1674890015222},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1674890015222},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1674890015222},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1674890015223},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1674890015224},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1674890015224},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1674890015224},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1674890015224},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1674890015225},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1674890015225},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1674890015225},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1674890015225},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1674890015218},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1674890015226},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1674890015226},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1674890015218},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1674890015221},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1674890015226},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"389869a578c1437cb2c5f034f3fb0ddab86d8c0c","modified":1674890015227},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1674890015227},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1674890015227},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1674890015227},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1674890015227},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1674890015234},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1674890015226},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1674890015227},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1674890015234},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1674890015210},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1674890015210},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1674890015211},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1674890015211},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1674890015211},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1674890015212},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1674890015213},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1674890015212},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1674890015213},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1674890015213},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1674890015214},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1674890015211},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1674890015212},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1674890015213},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1674890015214},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1674890015214},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1674890015215},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1674890015215},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1674890015215},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1674890015216},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1674890015216},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1674890015216},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1674890015216},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1674890015216},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1674890015217},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1674890015217},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1674890015217},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1674890015218},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1674890015217},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1674890015218},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1674890015219},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1674890015219},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1674890015220},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1674890015220},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1674890015219},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1674890015218},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1674890015219},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1674890015220},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1674890015220},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1674890015220},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1674890015221},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1674890015221},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1674890015222},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1674890015221},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1674890015222},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1674890015221},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1674890015223},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1674890015223},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1674890015223},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1674890015223},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1674890015223},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1674890015219},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1674890015234},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1674890015234},{"_id":"public/2020/10/29/download/index.html","hash":"17138db2d60132dd33726517eeb6d88d80b3b87f","modified":1674896577403},{"_id":"public/2020/08/28/let/index.html","hash":"de0270c9a39a6667fe83fdfea972429e70608c87","modified":1674896577403},{"_id":"public/2018/07/24/two/index.html","hash":"4cef60befa9b0b8910b01554a302b72056f8b8bc","modified":1674896577403},{"_id":"public/2018/06/01/hello-world/index.html","hash":"095239c03897aa04c6602545d524db872b446447","modified":1674896577403},{"_id":"public/archives/index.html","hash":"ab08ff19f03e40b96f2f13408dbdcc7bc2746dd9","modified":1674896577403},{"_id":"public/archives/2018/index.html","hash":"509e36cd20eb5041771357f8813a9a7009912059","modified":1674896577403},{"_id":"public/archives/2018/06/index.html","hash":"cbc57920695986a4e528e25bb8b757876522e114","modified":1674896577403},{"_id":"public/archives/2018/07/index.html","hash":"bfb9281152d2c2eb8fb4949d2d8a894bca5b8a2e","modified":1674896577403},{"_id":"public/archives/2019/index.html","hash":"f43474c18a399116519495fe2df064cc2bff6f7c","modified":1674896577403},{"_id":"public/archives/2019/08/index.html","hash":"29030435cebdc03b2065d97adc82a1301ffba654","modified":1674896577403},{"_id":"public/archives/2019/10/index.html","hash":"e5e92788ed235ac27dc99c830e25b9ca941d231d","modified":1674896577403},{"_id":"public/archives/2020/index.html","hash":"e232ca90ea772c41ea6adc5be7b372808f866528","modified":1674896577403},{"_id":"public/archives/2020/08/index.html","hash":"0cf5a275b0b47d63e64a8002f3a9c74190b337db","modified":1674896577403},{"_id":"public/archives/2020/10/index.html","hash":"b44c5d4656fb1fb4d23f14798a72ea474b24609f","modified":1674896577403},{"_id":"public/archives/2020/11/index.html","hash":"1106a509bfa65d729e21d0316baeea251151ace8","modified":1674896577403},{"_id":"public/archives/2021/index.html","hash":"46c290e0ef74ea9942623d6be588681cd1be31c3","modified":1674896577403},{"_id":"public/archives/2021/01/index.html","hash":"3c105f3447a969a70ed1cc9f109cfbe46d8b235b","modified":1674896577403},{"_id":"public/2021/01/20/electron1/index.html","hash":"7ee5ac05fea180811d45f9e9c8ec22c109cce078","modified":1674896577403},{"_id":"public/2020/11/19/element-rate/index.html","hash":"a397aa62bf82b6514437ddb0124ab5c0be0e0e0f","modified":1674896577403},{"_id":"public/2020/08/25/one/index.html","hash":"e64dc4afa9c04b33447920161496cf7f2d2df8de","modified":1674896577403},{"_id":"public/2019/10/31/four/index.html","hash":"d033a8b359c2f5a15c78d42fd1fc393b3ce660f5","modified":1674896577403},{"_id":"public/2019/08/20/five/index.html","hash":"8ebc4692af6c8bf89f8d7d50c24936b0851abe43","modified":1674896577403},{"_id":"public/index.html","hash":"526a38d98c67d300789d3afe57647c07bf2073fd","modified":1674896577403},{"_id":"public/images/name.png","hash":"5aef8b75b2c9b6a81726a24fa538dd0e687ed1af","modified":1674896577403},{"_id":"public/images/star.png","hash":"2ce1c7b49cda354f405e003949c73f5340bc36ed","modified":1674896577403},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1674896577403},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1674896577403},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1674896577403},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1674896577403},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1674896577403},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1674896577403},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1674896577403},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1674896577403},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1674896577403},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1674896577403},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1674896577403},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1674896577403},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1674896577403},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1674896577403},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1674896577403},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1674896577403},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1674896577403},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1674896577403},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1674896577403},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1674896577403},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1674896577403},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1674896577403},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1674896577403},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1674896577403},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1674896577403},{"_id":"public/css/main.css","hash":"73acb526a842d46156b5c2ea939543234ed339e8","modified":1674896577403},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1674896577403},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1674896577403},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1674896577403},{"_id":"public/images/download.png","hash":"50a170eaf38251b6854b7d79077c6944cfe8dba7","modified":1674896577403},{"_id":"public/images/iconfont.png","hash":"53d0de7bc61a361612d7573c7e170726244202ff","modified":1674896577403},{"_id":"public/images/electron1.png","hash":"860e1f3539ee34fa8ddb59271131ec32e46cda54","modified":1674896577403}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Electron 开发第一篇：启动不同环境及打包不同环境","date":"2021-01-20T03:29:00.000Z","_content":"\n\n<font face=\"STCAIYUN\" size=\"2\">最近在开发桌面端应用，昨天第一个版本上线完，今天没有什么紧急的事要做，把桌面端项目的调试环境与打包环境修改了一番，更方便，灵活性更高，相应的提高了一些开发能效。</font>\n\n> <font face=\"STCAIYUN\" size=\"2\">未修改时可能存在的问题：\n1.多人协作时，改了BASE_URL 在提交时就要一直记住再改回去，不小心提交了别人合并时得看半天，担心合并错误；\n  2.打包时，如果测试需要测试不同环境的包时，要来回的改BASE_URL，这个还是一个变量，如果出现多个变量，那就呵呵了🙃；\n  3.太不智能,不够自动化。</font>\n\n<font face=\"STCAIYUN\" size=\"2\">1.解决办法就是在package.json 里面去设置不同环境的命令，来针对不同的环境来执行不同的命令，如下：</font>\n\n\n```\n\"scripts\": {\n    \"build\": \"concurrently \\\"yarn build:main\\\" \\\"yarn build:renderer\\\"\",\n    \"build:main\": \"cross-env NODE_ENV=production webpack --config ./.erb/configs/webpack.config.main.prod.babel.js\",\n    \"build:renderer\": \"cross-env NODE_ENV=production webpack --config ./.erb/configs/webpack.config.renderer.prod.babel.js\",\n    \"rebuild\": \"electron-rebuild --parallel --types prod,dev,optional --module-dir src\",\n    \"lint\": \"cross-env NODE_ENV=development eslint . --cache --ext .js,.jsx,.ts,.tsx\",\n    \"package\": \"yarn build && electron-builder build --publish never\",\n    \"package:dev\": \"cross-env ENV=dev yarn package\",\n    \"package:test\": \"cross-env ENV=test yarn package\",\n    \"package:test2\": \"cross-env ENV=test2 yarn package\",\n    \"package:pre\": \"cross-env ENV=pre yarn package\",\n    \"package:product\": \"cross-env ENV=product yarn package\",\n    \"postinstall\": \"node -r @babel/register .erb/scripts/CheckNativeDep.js && electron-builder install-app-deps && yarn cross-env NODE_ENV=development webpack --config ./.erb/configs/webpack.config.renderer.dev.dll.babel.js && opencollective-postinstall && yarn-deduplicate yarn.lock\",\n    \"base\": \"node -r @babel/register ./.erb/scripts/CheckPortInUse.js && cross-env yarn start:renderer\",\n    \"start:dev\": \"cross-env ENV=dev yarn base\",\n    \"start:test\": \"cross-env ENV=test yarn base\",\n    \"start:test2\": \"cross-env ENV=test2 yarn base\",\n    \"start:pre\": \"cross-env ENV=pre yarn base\",\n    \"start:product\": \"cross-env ENV=product yarn base\",\n    \"start:main\": \"cross-env NODE_ENV=development electron -r ./.erb/scripts/BabelRegister ./src/main.dev.ts\",\n    \"start:renderer\": \"cross-env NODE_ENV=development webpack serve --config ./.erb/configs/webpack.config.renderer.dev.babel.js\",\n    \"test\": \"jest\"\n  },\n```\n\n\n\n<font face=\"STCAIYUN\" size=\"2\">在修改过程中发生的问题：\n1.node 环境下可以正常拿到环境变量，在electron 中是拿不到的</font>\n\n![](/images/electron1.png)\n\n<font face=\"STCAIYUN\" size=\"2\">2.方法1可以看出写了很多相同的代码，下面就借助inquirer 命令行工具进行简化，可以针对不同的环境进行选择不同的启动命令，如下：</font>\n\n> <font face=\"STCAIYUN\" size=\"2\">\n1.启动或者打包；   <br/>\n2.\"inquirer\":\"TYPE=development node ./scripts/inquirer.js\",<br/>\n3.\"inquirer:package\":\"TYPE=production node ./scripts/inquirer.js\",</font>\n\n\n<br/>\n```\n//inquirer.js\nconst inquirer = require('inquirer');\nconst spawn = require('cross-spawn');\nconst promptList = [\n  {\n    type: 'list',\n    message: '请选择一种环境:',\n    name: 'fruit',\n    choices: ['dev', 'test', 'test2', 'pre', 'product'],\n    filter: function (val) {\n      // 使用filter将回答变为小写\n      return val.toLowerCase();\n    },\n  },\n  {\n    type: 'list',\n    message: '请选择打包平台:',\n    name: 'platform',\n    choices: ['--win', '--mac'],\n    filter: function (val) {\n      // 使用filter将回答变为小写\n      return val.toLowerCase();\n    },\n  },\n];\n\nif(process.env.TYPE === 'development'){\n  promptList.pop();\n}\ninquirer.prompt(promptList).then((answers) => {\n  const spawnType = process.env.TYPE === 'development'?'start':'package';\n  const args = process.env.TYPE ==='development'?[spawnType]:[spawnType,answers.platform];\n  console.log(args,'args')\n  spawn(`yarn`,args, {\n    stdio: 'inherit',\n    // 仅在当前运行环境为 Windows 时，才使用 shell\n    shell: ['win32','win64'].includes(process.platform) ,\n    env:{\n      ...process.env,\n      ENV:answers.fruit\n    }\n  });\n  console.log(answers); // 返回的结果\n});\n\n```\n","source":"_posts/electron1.md","raw":"---\ntitle: Electron 开发第一篇：启动不同环境及打包不同环境\ndate: 2021-01-20 11:29\ntags:\n---\n\n\n<font face=\"STCAIYUN\" size=\"2\">最近在开发桌面端应用，昨天第一个版本上线完，今天没有什么紧急的事要做，把桌面端项目的调试环境与打包环境修改了一番，更方便，灵活性更高，相应的提高了一些开发能效。</font>\n\n> <font face=\"STCAIYUN\" size=\"2\">未修改时可能存在的问题：\n1.多人协作时，改了BASE_URL 在提交时就要一直记住再改回去，不小心提交了别人合并时得看半天，担心合并错误；\n  2.打包时，如果测试需要测试不同环境的包时，要来回的改BASE_URL，这个还是一个变量，如果出现多个变量，那就呵呵了🙃；\n  3.太不智能,不够自动化。</font>\n\n<font face=\"STCAIYUN\" size=\"2\">1.解决办法就是在package.json 里面去设置不同环境的命令，来针对不同的环境来执行不同的命令，如下：</font>\n\n\n```\n\"scripts\": {\n    \"build\": \"concurrently \\\"yarn build:main\\\" \\\"yarn build:renderer\\\"\",\n    \"build:main\": \"cross-env NODE_ENV=production webpack --config ./.erb/configs/webpack.config.main.prod.babel.js\",\n    \"build:renderer\": \"cross-env NODE_ENV=production webpack --config ./.erb/configs/webpack.config.renderer.prod.babel.js\",\n    \"rebuild\": \"electron-rebuild --parallel --types prod,dev,optional --module-dir src\",\n    \"lint\": \"cross-env NODE_ENV=development eslint . --cache --ext .js,.jsx,.ts,.tsx\",\n    \"package\": \"yarn build && electron-builder build --publish never\",\n    \"package:dev\": \"cross-env ENV=dev yarn package\",\n    \"package:test\": \"cross-env ENV=test yarn package\",\n    \"package:test2\": \"cross-env ENV=test2 yarn package\",\n    \"package:pre\": \"cross-env ENV=pre yarn package\",\n    \"package:product\": \"cross-env ENV=product yarn package\",\n    \"postinstall\": \"node -r @babel/register .erb/scripts/CheckNativeDep.js && electron-builder install-app-deps && yarn cross-env NODE_ENV=development webpack --config ./.erb/configs/webpack.config.renderer.dev.dll.babel.js && opencollective-postinstall && yarn-deduplicate yarn.lock\",\n    \"base\": \"node -r @babel/register ./.erb/scripts/CheckPortInUse.js && cross-env yarn start:renderer\",\n    \"start:dev\": \"cross-env ENV=dev yarn base\",\n    \"start:test\": \"cross-env ENV=test yarn base\",\n    \"start:test2\": \"cross-env ENV=test2 yarn base\",\n    \"start:pre\": \"cross-env ENV=pre yarn base\",\n    \"start:product\": \"cross-env ENV=product yarn base\",\n    \"start:main\": \"cross-env NODE_ENV=development electron -r ./.erb/scripts/BabelRegister ./src/main.dev.ts\",\n    \"start:renderer\": \"cross-env NODE_ENV=development webpack serve --config ./.erb/configs/webpack.config.renderer.dev.babel.js\",\n    \"test\": \"jest\"\n  },\n```\n\n\n\n<font face=\"STCAIYUN\" size=\"2\">在修改过程中发生的问题：\n1.node 环境下可以正常拿到环境变量，在electron 中是拿不到的</font>\n\n![](/images/electron1.png)\n\n<font face=\"STCAIYUN\" size=\"2\">2.方法1可以看出写了很多相同的代码，下面就借助inquirer 命令行工具进行简化，可以针对不同的环境进行选择不同的启动命令，如下：</font>\n\n> <font face=\"STCAIYUN\" size=\"2\">\n1.启动或者打包；   <br/>\n2.\"inquirer\":\"TYPE=development node ./scripts/inquirer.js\",<br/>\n3.\"inquirer:package\":\"TYPE=production node ./scripts/inquirer.js\",</font>\n\n\n<br/>\n```\n//inquirer.js\nconst inquirer = require('inquirer');\nconst spawn = require('cross-spawn');\nconst promptList = [\n  {\n    type: 'list',\n    message: '请选择一种环境:',\n    name: 'fruit',\n    choices: ['dev', 'test', 'test2', 'pre', 'product'],\n    filter: function (val) {\n      // 使用filter将回答变为小写\n      return val.toLowerCase();\n    },\n  },\n  {\n    type: 'list',\n    message: '请选择打包平台:',\n    name: 'platform',\n    choices: ['--win', '--mac'],\n    filter: function (val) {\n      // 使用filter将回答变为小写\n      return val.toLowerCase();\n    },\n  },\n];\n\nif(process.env.TYPE === 'development'){\n  promptList.pop();\n}\ninquirer.prompt(promptList).then((answers) => {\n  const spawnType = process.env.TYPE === 'development'?'start':'package';\n  const args = process.env.TYPE ==='development'?[spawnType]:[spawnType,answers.platform];\n  console.log(args,'args')\n  spawn(`yarn`,args, {\n    stdio: 'inherit',\n    // 仅在当前运行环境为 Windows 时，才使用 shell\n    shell: ['win32','win64'].includes(process.platform) ,\n    env:{\n      ...process.env,\n      ENV:answers.fruit\n    }\n  });\n  console.log(answers); // 返回的结果\n});\n\n```\n","slug":"electron1","published":1,"updated":"2023-01-28T07:13:35.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfq6eiq0000riyofatpdzki","content":"<p><font face=\"STCAIYUN\" size=\"2\">最近在开发桌面端应用，昨天第一个版本上线完，今天没有什么紧急的事要做，把桌面端项目的调试环境与打包环境修改了一番，更方便，灵活性更高，相应的提高了一些开发能效。</font></p>\n<blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">未修改时可能存在的问题：<br>1.多人协作时，改了BASE_URL 在提交时就要一直记住再改回去，不小心提交了别人合并时得看半天，担心合并错误；<br>  2.打包时，如果测试需要测试不同环境的包时，要来回的改BASE_URL，这个还是一个变量，如果出现多个变量，那就呵呵了🙃；<br>  3.太不智能,不够自动化。</font></p>\n</blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">1.解决办法就是在package.json 里面去设置不同环境的命令，来针对不同的环境来执行不同的命令，如下：</font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;build&quot;: &quot;concurrently \\&quot;yarn build:main\\&quot; \\&quot;yarn build:renderer\\&quot;&quot;,</span><br><span class=\"line\">    &quot;build:main&quot;: &quot;cross-env NODE_ENV=production webpack --config ./.erb/configs/webpack.config.main.prod.babel.js&quot;,</span><br><span class=\"line\">    &quot;build:renderer&quot;: &quot;cross-env NODE_ENV=production webpack --config ./.erb/configs/webpack.config.renderer.prod.babel.js&quot;,</span><br><span class=\"line\">    &quot;rebuild&quot;: &quot;electron-rebuild --parallel --types prod,dev,optional --module-dir src&quot;,</span><br><span class=\"line\">    &quot;lint&quot;: &quot;cross-env NODE_ENV=development eslint . --cache --ext .js,.jsx,.ts,.tsx&quot;,</span><br><span class=\"line\">    &quot;package&quot;: &quot;yarn build &amp;&amp; electron-builder build --publish never&quot;,</span><br><span class=\"line\">    &quot;package:dev&quot;: &quot;cross-env ENV=dev yarn package&quot;,</span><br><span class=\"line\">    &quot;package:test&quot;: &quot;cross-env ENV=test yarn package&quot;,</span><br><span class=\"line\">    &quot;package:test2&quot;: &quot;cross-env ENV=test2 yarn package&quot;,</span><br><span class=\"line\">    &quot;package:pre&quot;: &quot;cross-env ENV=pre yarn package&quot;,</span><br><span class=\"line\">    &quot;package:product&quot;: &quot;cross-env ENV=product yarn package&quot;,</span><br><span class=\"line\">    &quot;postinstall&quot;: &quot;node -r @babel/register .erb/scripts/CheckNativeDep.js &amp;&amp; electron-builder install-app-deps &amp;&amp; yarn cross-env NODE_ENV=development webpack --config ./.erb/configs/webpack.config.renderer.dev.dll.babel.js &amp;&amp; opencollective-postinstall &amp;&amp; yarn-deduplicate yarn.lock&quot;,</span><br><span class=\"line\">    &quot;base&quot;: &quot;node -r @babel/register ./.erb/scripts/CheckPortInUse.js &amp;&amp; cross-env yarn start:renderer&quot;,</span><br><span class=\"line\">    &quot;start:dev&quot;: &quot;cross-env ENV=dev yarn base&quot;,</span><br><span class=\"line\">    &quot;start:test&quot;: &quot;cross-env ENV=test yarn base&quot;,</span><br><span class=\"line\">    &quot;start:test2&quot;: &quot;cross-env ENV=test2 yarn base&quot;,</span><br><span class=\"line\">    &quot;start:pre&quot;: &quot;cross-env ENV=pre yarn base&quot;,</span><br><span class=\"line\">    &quot;start:product&quot;: &quot;cross-env ENV=product yarn base&quot;,</span><br><span class=\"line\">    &quot;start:main&quot;: &quot;cross-env NODE_ENV=development electron -r ./.erb/scripts/BabelRegister ./src/main.dev.ts&quot;,</span><br><span class=\"line\">    &quot;start:renderer&quot;: &quot;cross-env NODE_ENV=development webpack serve --config ./.erb/configs/webpack.config.renderer.dev.babel.js&quot;,</span><br><span class=\"line\">    &quot;test&quot;: &quot;jest&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<p><font face=\"STCAIYUN\" size=\"2\">在修改过程中发生的问题：<br>1.node 环境下可以正常拿到环境变量，在electron 中是拿不到的</font></p>\n<p><img src=\"/images/electron1.png\"></p>\n<p><font face=\"STCAIYUN\" size=\"2\">2.方法1可以看出写了很多相同的代码，下面就借助inquirer 命令行工具进行简化，可以针对不同的环境进行选择不同的启动命令，如下：</font></p>\n<blockquote>\n<font face=\"STCAIYUN\" size=\"2\">\n1.启动或者打包；   <br/>\n2.\"inquirer\":\"TYPE=development node ./scripts/inquirer.js\",<br/>\n3.\"inquirer:package\":\"TYPE=production node ./scripts/inquirer.js\",</font>\n</blockquote>\n<br/>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//inquirer.js</span><br><span class=\"line\">const inquirer = require(&#x27;inquirer&#x27;);</span><br><span class=\"line\">const spawn = require(&#x27;cross-spawn&#x27;);</span><br><span class=\"line\">const promptList = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    type: &#x27;list&#x27;,</span><br><span class=\"line\">    message: &#x27;请选择一种环境:&#x27;,</span><br><span class=\"line\">    name: &#x27;fruit&#x27;,</span><br><span class=\"line\">    choices: [&#x27;dev&#x27;, &#x27;test&#x27;, &#x27;test2&#x27;, &#x27;pre&#x27;, &#x27;product&#x27;],</span><br><span class=\"line\">    filter: function (val) &#123;</span><br><span class=\"line\">      // 使用filter将回答变为小写</span><br><span class=\"line\">      return val.toLowerCase();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    type: &#x27;list&#x27;,</span><br><span class=\"line\">    message: &#x27;请选择打包平台:&#x27;,</span><br><span class=\"line\">    name: &#x27;platform&#x27;,</span><br><span class=\"line\">    choices: [&#x27;--win&#x27;, &#x27;--mac&#x27;],</span><br><span class=\"line\">    filter: function (val) &#123;</span><br><span class=\"line\">      // 使用filter将回答变为小写</span><br><span class=\"line\">      return val.toLowerCase();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">if(process.env.TYPE === &#x27;development&#x27;)&#123;</span><br><span class=\"line\">  promptList.pop();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inquirer.prompt(promptList).then((answers) =&gt; &#123;</span><br><span class=\"line\">  const spawnType = process.env.TYPE === &#x27;development&#x27;?&#x27;start&#x27;:&#x27;package&#x27;;</span><br><span class=\"line\">  const args = process.env.TYPE ===&#x27;development&#x27;?[spawnType]:[spawnType,answers.platform];</span><br><span class=\"line\">  console.log(args,&#x27;args&#x27;)</span><br><span class=\"line\">  spawn(`yarn`,args, &#123;</span><br><span class=\"line\">    stdio: &#x27;inherit&#x27;,</span><br><span class=\"line\">    // 仅在当前运行环境为 Windows 时，才使用 shell</span><br><span class=\"line\">    shell: [&#x27;win32&#x27;,&#x27;win64&#x27;].includes(process.platform) ,</span><br><span class=\"line\">    env:&#123;</span><br><span class=\"line\">      ...process.env,</span><br><span class=\"line\">      ENV:answers.fruit</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  console.log(answers); // 返回的结果</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><font face=\"STCAIYUN\" size=\"2\">最近在开发桌面端应用，昨天第一个版本上线完，今天没有什么紧急的事要做，把桌面端项目的调试环境与打包环境修改了一番，更方便，灵活性更高，相应的提高了一些开发能效。</font></p>\n<blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">未修改时可能存在的问题：<br>1.多人协作时，改了BASE_URL 在提交时就要一直记住再改回去，不小心提交了别人合并时得看半天，担心合并错误；<br>  2.打包时，如果测试需要测试不同环境的包时，要来回的改BASE_URL，这个还是一个变量，如果出现多个变量，那就呵呵了🙃；<br>  3.太不智能,不够自动化。</font></p>\n</blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">1.解决办法就是在package.json 里面去设置不同环境的命令，来针对不同的环境来执行不同的命令，如下：</font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;build&quot;: &quot;concurrently \\&quot;yarn build:main\\&quot; \\&quot;yarn build:renderer\\&quot;&quot;,</span><br><span class=\"line\">    &quot;build:main&quot;: &quot;cross-env NODE_ENV=production webpack --config ./.erb/configs/webpack.config.main.prod.babel.js&quot;,</span><br><span class=\"line\">    &quot;build:renderer&quot;: &quot;cross-env NODE_ENV=production webpack --config ./.erb/configs/webpack.config.renderer.prod.babel.js&quot;,</span><br><span class=\"line\">    &quot;rebuild&quot;: &quot;electron-rebuild --parallel --types prod,dev,optional --module-dir src&quot;,</span><br><span class=\"line\">    &quot;lint&quot;: &quot;cross-env NODE_ENV=development eslint . --cache --ext .js,.jsx,.ts,.tsx&quot;,</span><br><span class=\"line\">    &quot;package&quot;: &quot;yarn build &amp;&amp; electron-builder build --publish never&quot;,</span><br><span class=\"line\">    &quot;package:dev&quot;: &quot;cross-env ENV=dev yarn package&quot;,</span><br><span class=\"line\">    &quot;package:test&quot;: &quot;cross-env ENV=test yarn package&quot;,</span><br><span class=\"line\">    &quot;package:test2&quot;: &quot;cross-env ENV=test2 yarn package&quot;,</span><br><span class=\"line\">    &quot;package:pre&quot;: &quot;cross-env ENV=pre yarn package&quot;,</span><br><span class=\"line\">    &quot;package:product&quot;: &quot;cross-env ENV=product yarn package&quot;,</span><br><span class=\"line\">    &quot;postinstall&quot;: &quot;node -r @babel/register .erb/scripts/CheckNativeDep.js &amp;&amp; electron-builder install-app-deps &amp;&amp; yarn cross-env NODE_ENV=development webpack --config ./.erb/configs/webpack.config.renderer.dev.dll.babel.js &amp;&amp; opencollective-postinstall &amp;&amp; yarn-deduplicate yarn.lock&quot;,</span><br><span class=\"line\">    &quot;base&quot;: &quot;node -r @babel/register ./.erb/scripts/CheckPortInUse.js &amp;&amp; cross-env yarn start:renderer&quot;,</span><br><span class=\"line\">    &quot;start:dev&quot;: &quot;cross-env ENV=dev yarn base&quot;,</span><br><span class=\"line\">    &quot;start:test&quot;: &quot;cross-env ENV=test yarn base&quot;,</span><br><span class=\"line\">    &quot;start:test2&quot;: &quot;cross-env ENV=test2 yarn base&quot;,</span><br><span class=\"line\">    &quot;start:pre&quot;: &quot;cross-env ENV=pre yarn base&quot;,</span><br><span class=\"line\">    &quot;start:product&quot;: &quot;cross-env ENV=product yarn base&quot;,</span><br><span class=\"line\">    &quot;start:main&quot;: &quot;cross-env NODE_ENV=development electron -r ./.erb/scripts/BabelRegister ./src/main.dev.ts&quot;,</span><br><span class=\"line\">    &quot;start:renderer&quot;: &quot;cross-env NODE_ENV=development webpack serve --config ./.erb/configs/webpack.config.renderer.dev.babel.js&quot;,</span><br><span class=\"line\">    &quot;test&quot;: &quot;jest&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<p><font face=\"STCAIYUN\" size=\"2\">在修改过程中发生的问题：<br>1.node 环境下可以正常拿到环境变量，在electron 中是拿不到的</font></p>\n<p><img src=\"/images/electron1.png\"></p>\n<p><font face=\"STCAIYUN\" size=\"2\">2.方法1可以看出写了很多相同的代码，下面就借助inquirer 命令行工具进行简化，可以针对不同的环境进行选择不同的启动命令，如下：</font></p>\n<blockquote>\n<font face=\"STCAIYUN\" size=\"2\">\n1.启动或者打包；   <br/>\n2.\"inquirer\":\"TYPE=development node ./scripts/inquirer.js\",<br/>\n3.\"inquirer:package\":\"TYPE=production node ./scripts/inquirer.js\",</font>\n</blockquote>\n<br/>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//inquirer.js</span><br><span class=\"line\">const inquirer = require(&#x27;inquirer&#x27;);</span><br><span class=\"line\">const spawn = require(&#x27;cross-spawn&#x27;);</span><br><span class=\"line\">const promptList = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    type: &#x27;list&#x27;,</span><br><span class=\"line\">    message: &#x27;请选择一种环境:&#x27;,</span><br><span class=\"line\">    name: &#x27;fruit&#x27;,</span><br><span class=\"line\">    choices: [&#x27;dev&#x27;, &#x27;test&#x27;, &#x27;test2&#x27;, &#x27;pre&#x27;, &#x27;product&#x27;],</span><br><span class=\"line\">    filter: function (val) &#123;</span><br><span class=\"line\">      // 使用filter将回答变为小写</span><br><span class=\"line\">      return val.toLowerCase();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    type: &#x27;list&#x27;,</span><br><span class=\"line\">    message: &#x27;请选择打包平台:&#x27;,</span><br><span class=\"line\">    name: &#x27;platform&#x27;,</span><br><span class=\"line\">    choices: [&#x27;--win&#x27;, &#x27;--mac&#x27;],</span><br><span class=\"line\">    filter: function (val) &#123;</span><br><span class=\"line\">      // 使用filter将回答变为小写</span><br><span class=\"line\">      return val.toLowerCase();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">if(process.env.TYPE === &#x27;development&#x27;)&#123;</span><br><span class=\"line\">  promptList.pop();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inquirer.prompt(promptList).then((answers) =&gt; &#123;</span><br><span class=\"line\">  const spawnType = process.env.TYPE === &#x27;development&#x27;?&#x27;start&#x27;:&#x27;package&#x27;;</span><br><span class=\"line\">  const args = process.env.TYPE ===&#x27;development&#x27;?[spawnType]:[spawnType,answers.platform];</span><br><span class=\"line\">  console.log(args,&#x27;args&#x27;)</span><br><span class=\"line\">  spawn(`yarn`,args, &#123;</span><br><span class=\"line\">    stdio: &#x27;inherit&#x27;,</span><br><span class=\"line\">    // 仅在当前运行环境为 Windows 时，才使用 shell</span><br><span class=\"line\">    shell: [&#x27;win32&#x27;,&#x27;win64&#x27;].includes(process.platform) ,</span><br><span class=\"line\">    env:&#123;</span><br><span class=\"line\">      ...process.env,</span><br><span class=\"line\">      ENV:answers.fruit</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  console.log(answers); // 返回的结果</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"download 下载方式","date":"2020-10-29T11:15:00.000Z","_content":"\n<font face=\"STCAIYUN\" size=\"3\">今天在于后端调试一个下载接口是，遇到一个下载不成功，提示’无权限‘操作，绕了一圈发现是此接口做了权限效验，草率了...</font>\n\n\n![](/images/download.png)\n\n> <font face=\"STCAIYUN\" size=\"2\">原因分析：\n1.后端提供一个下载接口，接口鉴权走中间件middlewoare ,\n  2.前端为了方便，使用window.open 直接拼装了链接，进行了下载，\n  3.2个系统，同一个接口，同一份代码，在a 端就可以正常下载，在b 端就下载不了</font>\n\n<font face=\"STCAIYUN\" size=\"2\">导致在2端出现不同的现象是，a 端鉴权使用Cookie ,b 端鉴权使用 token ,Cookie 情况下无论使用ajax ,还是 window.open 在header 里面默认就被添加，而token 这种就做不到，所以就会导致同样的代码，在不同的鉴权下就现象不同。</font>\n\n\n```\n解决方法：\nconst downloadOriginalText = useCallback(() => {\n    // 接口\n    exportDownloadApi({ ct_id:ctId, task_id:taskId, ca_id:caId }).then(({ data }) => {\n      const url = window.URL.createObjectURL(data);\n      let a = document.createElement('a');\n      document.body.appendChild(a);\n      // 可以将 a 标签display 设为none ,以免有所影响\n      a.href = url;\n      a.click();\n      window.URL.revokeObjectURL(url);\n    })\n  }, [ctId, taskId, caId])\n```\n\n> <font face=\"STCAIYUN\" size=\"2\">上述方法可能会出现的问题：\n1.设置responseType ,拿使用axios exportDownloadApi 这个接口的地方要设置responseType ,它是跟Header 同级</font>\n```\nexport async function exportDownloadApi (data) {\n  return requestHelper.get('/exportxxxxxx00000000', { params: data, responseType: 'blob' });\n}\n```\n> <font face=\"STCAIYUN\" size=\"2\">2.在公共处理请求的地方，在header 里面设置token</font>\n\n<font face=\"STCAIYUN\" size=\"2\">如果不设就会出现，点击下载，浏览器会出现一个下载行为，文件也下载下载下来了，就是无法打开，告知被损坏，正常下载是没有这个下载行为的，直接就打开了（有待验证）</font>\n\n\n<font face=\"STCAIYUN\" size=\"2\">在调试过程中还发生这样一个问题：\n问题：设置了responseType 也设置了token ,但是修改了Response Header 里面的Content-Type: application/octet-stream,下载下来的也是损坏的，下载动作会有。此时 Response Header 里面是：\nContent-Disposition: attachment; filename=\"translation-55980.zip\"\nContent-Type: application/octet-stream，没有具体去分析，感觉问题是出现在这里，于是又让后端设置为：\nContent-Type: application/zip，一把过。</font>\n\n\n\n","source":"_posts/download.md","raw":"---\ntitle: download 下载方式\ndate: 2020-10-29 19:15\ntags:\n---\n\n<font face=\"STCAIYUN\" size=\"3\">今天在于后端调试一个下载接口是，遇到一个下载不成功，提示’无权限‘操作，绕了一圈发现是此接口做了权限效验，草率了...</font>\n\n\n![](/images/download.png)\n\n> <font face=\"STCAIYUN\" size=\"2\">原因分析：\n1.后端提供一个下载接口，接口鉴权走中间件middlewoare ,\n  2.前端为了方便，使用window.open 直接拼装了链接，进行了下载，\n  3.2个系统，同一个接口，同一份代码，在a 端就可以正常下载，在b 端就下载不了</font>\n\n<font face=\"STCAIYUN\" size=\"2\">导致在2端出现不同的现象是，a 端鉴权使用Cookie ,b 端鉴权使用 token ,Cookie 情况下无论使用ajax ,还是 window.open 在header 里面默认就被添加，而token 这种就做不到，所以就会导致同样的代码，在不同的鉴权下就现象不同。</font>\n\n\n```\n解决方法：\nconst downloadOriginalText = useCallback(() => {\n    // 接口\n    exportDownloadApi({ ct_id:ctId, task_id:taskId, ca_id:caId }).then(({ data }) => {\n      const url = window.URL.createObjectURL(data);\n      let a = document.createElement('a');\n      document.body.appendChild(a);\n      // 可以将 a 标签display 设为none ,以免有所影响\n      a.href = url;\n      a.click();\n      window.URL.revokeObjectURL(url);\n    })\n  }, [ctId, taskId, caId])\n```\n\n> <font face=\"STCAIYUN\" size=\"2\">上述方法可能会出现的问题：\n1.设置responseType ,拿使用axios exportDownloadApi 这个接口的地方要设置responseType ,它是跟Header 同级</font>\n```\nexport async function exportDownloadApi (data) {\n  return requestHelper.get('/exportxxxxxx00000000', { params: data, responseType: 'blob' });\n}\n```\n> <font face=\"STCAIYUN\" size=\"2\">2.在公共处理请求的地方，在header 里面设置token</font>\n\n<font face=\"STCAIYUN\" size=\"2\">如果不设就会出现，点击下载，浏览器会出现一个下载行为，文件也下载下载下来了，就是无法打开，告知被损坏，正常下载是没有这个下载行为的，直接就打开了（有待验证）</font>\n\n\n<font face=\"STCAIYUN\" size=\"2\">在调试过程中还发生这样一个问题：\n问题：设置了responseType 也设置了token ,但是修改了Response Header 里面的Content-Type: application/octet-stream,下载下来的也是损坏的，下载动作会有。此时 Response Header 里面是：\nContent-Disposition: attachment; filename=\"translation-55980.zip\"\nContent-Type: application/octet-stream，没有具体去分析，感觉问题是出现在这里，于是又让后端设置为：\nContent-Type: application/zip，一把过。</font>\n\n\n\n","slug":"download","published":1,"updated":"2023-01-28T07:13:35.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfq6eiv0001riyo45xuekea","content":"<p><font face=\"STCAIYUN\" size=\"3\">今天在于后端调试一个下载接口是，遇到一个下载不成功，提示’无权限‘操作，绕了一圈发现是此接口做了权限效验，草率了…</font></p>\n<p><img src=\"/images/download.png\"></p>\n<blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">原因分析：<br>1.后端提供一个下载接口，接口鉴权走中间件middlewoare ,<br>  2.前端为了方便，使用window.open 直接拼装了链接，进行了下载，<br>  3.2个系统，同一个接口，同一份代码，在a 端就可以正常下载，在b 端就下载不了</font></p>\n</blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">导致在2端出现不同的现象是，a 端鉴权使用Cookie ,b 端鉴权使用 token ,Cookie 情况下无论使用ajax ,还是 window.open 在header 里面默认就被添加，而token 这种就做不到，所以就会导致同样的代码，在不同的鉴权下就现象不同。</font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方法：</span><br><span class=\"line\">const downloadOriginalText = useCallback(() =&gt; &#123;</span><br><span class=\"line\">    // 接口</span><br><span class=\"line\">    exportDownloadApi(&#123; ct_id:ctId, task_id:taskId, ca_id:caId &#125;).then((&#123; data &#125;) =&gt; &#123;</span><br><span class=\"line\">      const url = window.URL.createObjectURL(data);</span><br><span class=\"line\">      let a = document.createElement(&#x27;a&#x27;);</span><br><span class=\"line\">      document.body.appendChild(a);</span><br><span class=\"line\">      // 可以将 a 标签display 设为none ,以免有所影响</span><br><span class=\"line\">      a.href = url;</span><br><span class=\"line\">      a.click();</span><br><span class=\"line\">      window.URL.revokeObjectURL(url);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;, [ctId, taskId, caId])</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">上述方法可能会出现的问题：<br>1.设置responseType ,拿使用axios exportDownloadApi 这个接口的地方要设置responseType ,它是跟Header 同级</font></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export async function exportDownloadApi (data) &#123;</span><br><span class=\"line\">  return requestHelper.get(&#x27;/exportxxxxxx00000000&#x27;, &#123; params: data, responseType: &#x27;blob&#x27; &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">2.在公共处理请求的地方，在header 里面设置token</font></p>\n</blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">如果不设就会出现，点击下载，浏览器会出现一个下载行为，文件也下载下载下来了，就是无法打开，告知被损坏，正常下载是没有这个下载行为的，直接就打开了（有待验证）</font></p>\n<p><font face=\"STCAIYUN\" size=\"2\">在调试过程中还发生这样一个问题：<br>问题：设置了responseType 也设置了token ,但是修改了Response Header 里面的Content-Type: application/octet-stream,下载下来的也是损坏的，下载动作会有。此时 Response Header 里面是：<br>Content-Disposition: attachment; filename=”translation-55980.zip”<br>Content-Type: application/octet-stream，没有具体去分析，感觉问题是出现在这里，于是又让后端设置为：<br>Content-Type: application/zip，一把过。</font></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font face=\"STCAIYUN\" size=\"3\">今天在于后端调试一个下载接口是，遇到一个下载不成功，提示’无权限‘操作，绕了一圈发现是此接口做了权限效验，草率了…</font></p>\n<p><img src=\"/images/download.png\"></p>\n<blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">原因分析：<br>1.后端提供一个下载接口，接口鉴权走中间件middlewoare ,<br>  2.前端为了方便，使用window.open 直接拼装了链接，进行了下载，<br>  3.2个系统，同一个接口，同一份代码，在a 端就可以正常下载，在b 端就下载不了</font></p>\n</blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">导致在2端出现不同的现象是，a 端鉴权使用Cookie ,b 端鉴权使用 token ,Cookie 情况下无论使用ajax ,还是 window.open 在header 里面默认就被添加，而token 这种就做不到，所以就会导致同样的代码，在不同的鉴权下就现象不同。</font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方法：</span><br><span class=\"line\">const downloadOriginalText = useCallback(() =&gt; &#123;</span><br><span class=\"line\">    // 接口</span><br><span class=\"line\">    exportDownloadApi(&#123; ct_id:ctId, task_id:taskId, ca_id:caId &#125;).then((&#123; data &#125;) =&gt; &#123;</span><br><span class=\"line\">      const url = window.URL.createObjectURL(data);</span><br><span class=\"line\">      let a = document.createElement(&#x27;a&#x27;);</span><br><span class=\"line\">      document.body.appendChild(a);</span><br><span class=\"line\">      // 可以将 a 标签display 设为none ,以免有所影响</span><br><span class=\"line\">      a.href = url;</span><br><span class=\"line\">      a.click();</span><br><span class=\"line\">      window.URL.revokeObjectURL(url);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;, [ctId, taskId, caId])</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">上述方法可能会出现的问题：<br>1.设置responseType ,拿使用axios exportDownloadApi 这个接口的地方要设置responseType ,它是跟Header 同级</font></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export async function exportDownloadApi (data) &#123;</span><br><span class=\"line\">  return requestHelper.get(&#x27;/exportxxxxxx00000000&#x27;, &#123; params: data, responseType: &#x27;blob&#x27; &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">2.在公共处理请求的地方，在header 里面设置token</font></p>\n</blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">如果不设就会出现，点击下载，浏览器会出现一个下载行为，文件也下载下载下来了，就是无法打开，告知被损坏，正常下载是没有这个下载行为的，直接就打开了（有待验证）</font></p>\n<p><font face=\"STCAIYUN\" size=\"2\">在调试过程中还发生这样一个问题：<br>问题：设置了responseType 也设置了token ,但是修改了Response Header 里面的Content-Type: application/octet-stream,下载下来的也是损坏的，下载动作会有。此时 Response Header 里面是：<br>Content-Disposition: attachment; filename=”translation-55980.zip”<br>Content-Type: application/octet-stream，没有具体去分析，感觉问题是出现在这里，于是又让后端设置为：<br>Content-Type: application/zip，一把过。</font></p>\n"},{"title":"Element-UI Rate 评分使用自定义icon","date":"2020-11-19T14:20:00.000Z","_content":"\n\n<font face=\"STCAIYUN\" size=\"3\">项目里面使用了React 与 Vue 进行同时开发，React 对应的使用的是Antd,Vue 则是用Element 这些组件库进行开发，在同一个项目下使用这2种框架，本身就依赖了vuera 来进行相互协作，无论是React 嵌入到Vue 里面，还是Vue 嵌入到React 里面，本来Vue 写得不多，所以这边就没有使用vuera 来完成，一个查看评分功能，在React 模块下用antd 的Rate 完成，在Vue 下用Element 的Rate 进行开发，想加深一下Vue 的开发。但是最终导致的结果是，查看评分的弹框，里面的星星大小颜色都不一样，需要统一一下。</font>\n\n> <font face=\"STCAIYUN\" size=\"2\">解决思路：\n1.通过自定义icon ,让星星大小、样色一样 ,\n  2.antd 的 Rate 使用character、element 的 Rate 使用icon-classes，\n  3.使用iconfont 配合完成</font>\n\n\n  ```\nantd Rate：\n  // 非自定义：<Rate value={subItem.value} disabled count={item.name === '增值评分'?3:5}/>\n  <Rate value={subItem.value} disabled count={item.name === '增值评分'?3:5} character={()=><IconSvg type=\"iconstar\" style={{ color: '#ffc300' }} />} />\n\n  // IconSvg 解析 阿里iconfont \n  const IconSvg = (props:{ type: string, className?:string, style?:any}) => {\n    return (\n      <svg className={`icon ${props.className || ''}`} aria-hidden=\"true\" style={props.style}>\n        <use xlinkHref={`#${props.type}`}></use>\n      </svg>\n    )\n  }\n  export default IconSvg\n\nelement Rate:\n  // 非自定义：<el-rate v-model=\"subItem.value\" disabled :max=\"item.name === '增值评分'?3:5\"></el-rate>\n  <el-rate v-model=\"subItem.value\" disabled :max=\"item.name === '增值评分'?3:5\" :icon-classes=\"iconClasses\" void-icon-class=\"icon-rate-face-off\" :colors=\"colors\">\n  </el-rate>\n\n  // javascript\n  name: 'check-rate',\n  props: ['rate', 'mark'],\n  data () {\n    return {\n      iconClasses: ['icon iconfont iconstar','icon iconfont iconstar','icon iconfont iconstar'],\n      colors:['#FFC300','#FFC300','#FFC300']\n    };\n  }\n```\n\n<font face=\"STCAIYUN\" size=\"3\">antd 的改造很顺利就完成了，但是element 的星星一直不出来，遇到的问题就是iconfont icon 引入后，没有展示出来：</font>\n\n<font face=\"STCAIYUN\" size=\"3\">主要是在iconfont 的使用上，先进行引入，如下图，将css js 文件分别在模板html 中进行引入</font>\n\n\n![](/images/iconfont.png)\n\n\n<font face=\"STCAIYUN\" size=\"3\">注意的点是iconClasses 这个里面填入的name 不要是在iconfont 网站上复制得到的，这是显示不出来的,它得到的是：iconstar  ，与at.alicnd.com 引用的对应有欠缺，所以导致显示不出来，它里面实际对应的是 icon iconfont iconstar ，类型+name 的一个组合</font>\n\n![](/images/star.png)\n\n![](/images/name.png)\n\n<font face=\"STCAIYUN\" size=\"3\">对比方式是在iconfont 网站上点击下载本地，打开demo_index.html 后就可以看到span 标签里面的class 就是实际可显示的。</font>\n\n\n","source":"_posts/element-rate.md","raw":"---\ntitle: Element-UI Rate 评分使用自定义icon\ndate: 2020-11-19 22:20\ntags:\n---\n\n\n<font face=\"STCAIYUN\" size=\"3\">项目里面使用了React 与 Vue 进行同时开发，React 对应的使用的是Antd,Vue 则是用Element 这些组件库进行开发，在同一个项目下使用这2种框架，本身就依赖了vuera 来进行相互协作，无论是React 嵌入到Vue 里面，还是Vue 嵌入到React 里面，本来Vue 写得不多，所以这边就没有使用vuera 来完成，一个查看评分功能，在React 模块下用antd 的Rate 完成，在Vue 下用Element 的Rate 进行开发，想加深一下Vue 的开发。但是最终导致的结果是，查看评分的弹框，里面的星星大小颜色都不一样，需要统一一下。</font>\n\n> <font face=\"STCAIYUN\" size=\"2\">解决思路：\n1.通过自定义icon ,让星星大小、样色一样 ,\n  2.antd 的 Rate 使用character、element 的 Rate 使用icon-classes，\n  3.使用iconfont 配合完成</font>\n\n\n  ```\nantd Rate：\n  // 非自定义：<Rate value={subItem.value} disabled count={item.name === '增值评分'?3:5}/>\n  <Rate value={subItem.value} disabled count={item.name === '增值评分'?3:5} character={()=><IconSvg type=\"iconstar\" style={{ color: '#ffc300' }} />} />\n\n  // IconSvg 解析 阿里iconfont \n  const IconSvg = (props:{ type: string, className?:string, style?:any}) => {\n    return (\n      <svg className={`icon ${props.className || ''}`} aria-hidden=\"true\" style={props.style}>\n        <use xlinkHref={`#${props.type}`}></use>\n      </svg>\n    )\n  }\n  export default IconSvg\n\nelement Rate:\n  // 非自定义：<el-rate v-model=\"subItem.value\" disabled :max=\"item.name === '增值评分'?3:5\"></el-rate>\n  <el-rate v-model=\"subItem.value\" disabled :max=\"item.name === '增值评分'?3:5\" :icon-classes=\"iconClasses\" void-icon-class=\"icon-rate-face-off\" :colors=\"colors\">\n  </el-rate>\n\n  // javascript\n  name: 'check-rate',\n  props: ['rate', 'mark'],\n  data () {\n    return {\n      iconClasses: ['icon iconfont iconstar','icon iconfont iconstar','icon iconfont iconstar'],\n      colors:['#FFC300','#FFC300','#FFC300']\n    };\n  }\n```\n\n<font face=\"STCAIYUN\" size=\"3\">antd 的改造很顺利就完成了，但是element 的星星一直不出来，遇到的问题就是iconfont icon 引入后，没有展示出来：</font>\n\n<font face=\"STCAIYUN\" size=\"3\">主要是在iconfont 的使用上，先进行引入，如下图，将css js 文件分别在模板html 中进行引入</font>\n\n\n![](/images/iconfont.png)\n\n\n<font face=\"STCAIYUN\" size=\"3\">注意的点是iconClasses 这个里面填入的name 不要是在iconfont 网站上复制得到的，这是显示不出来的,它得到的是：iconstar  ，与at.alicnd.com 引用的对应有欠缺，所以导致显示不出来，它里面实际对应的是 icon iconfont iconstar ，类型+name 的一个组合</font>\n\n![](/images/star.png)\n\n![](/images/name.png)\n\n<font face=\"STCAIYUN\" size=\"3\">对比方式是在iconfont 网站上点击下载本地，打开demo_index.html 后就可以看到span 标签里面的class 就是实际可显示的。</font>\n\n\n","slug":"element-rate","published":1,"updated":"2023-01-28T07:13:35.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfq6eix0002riyofivc83nl","content":"<p><font face=\"STCAIYUN\" size=\"3\">项目里面使用了React 与 Vue 进行同时开发，React 对应的使用的是Antd,Vue 则是用Element 这些组件库进行开发，在同一个项目下使用这2种框架，本身就依赖了vuera 来进行相互协作，无论是React 嵌入到Vue 里面，还是Vue 嵌入到React 里面，本来Vue 写得不多，所以这边就没有使用vuera 来完成，一个查看评分功能，在React 模块下用antd 的Rate 完成，在Vue 下用Element 的Rate 进行开发，想加深一下Vue 的开发。但是最终导致的结果是，查看评分的弹框，里面的星星大小颜色都不一样，需要统一一下。</font></p>\n<blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">解决思路：<br>1.通过自定义icon ,让星星大小、样色一样 ,<br>  2.antd 的 Rate 使用character、element 的 Rate 使用icon-classes，<br>  3.使用iconfont 配合完成</font></p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">antd Rate：</span><br><span class=\"line\">  // 非自定义：&lt;Rate value=&#123;subItem.value&#125; disabled count=&#123;item.name === &#x27;增值评分&#x27;?3:5&#125;/&gt;</span><br><span class=\"line\">  &lt;Rate value=&#123;subItem.value&#125; disabled count=&#123;item.name === &#x27;增值评分&#x27;?3:5&#125; character=&#123;()=&gt;&lt;IconSvg type=&quot;iconstar&quot; style=&#123;&#123; color: &#x27;#ffc300&#x27; &#125;&#125; /&gt;&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  // IconSvg 解析 阿里iconfont </span><br><span class=\"line\">  const IconSvg = (props:&#123; type: string, className?:string, style?:any&#125;) =&gt; &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;svg className=&#123;`icon $&#123;props.className || &#x27;&#x27;&#125;`&#125; aria-hidden=&quot;true&quot; style=&#123;props.style&#125;&gt;</span><br><span class=\"line\">        &lt;use xlinkHref=&#123;`#$&#123;props.type&#125;`&#125;&gt;&lt;/use&gt;</span><br><span class=\"line\">      &lt;/svg&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  export default IconSvg</span><br><span class=\"line\"></span><br><span class=\"line\">element Rate:</span><br><span class=\"line\">  // 非自定义：&lt;el-rate v-model=&quot;subItem.value&quot; disabled :max=&quot;item.name === &#x27;增值评分&#x27;?3:5&quot;&gt;&lt;/el-rate&gt;</span><br><span class=\"line\">  &lt;el-rate v-model=&quot;subItem.value&quot; disabled :max=&quot;item.name === &#x27;增值评分&#x27;?3:5&quot; :icon-classes=&quot;iconClasses&quot; void-icon-class=&quot;icon-rate-face-off&quot; :colors=&quot;colors&quot;&gt;</span><br><span class=\"line\">  &lt;/el-rate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  // javascript</span><br><span class=\"line\">  name: &#x27;check-rate&#x27;,</span><br><span class=\"line\">  props: [&#x27;rate&#x27;, &#x27;mark&#x27;],</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      iconClasses: [&#x27;icon iconfont iconstar&#x27;,&#x27;icon iconfont iconstar&#x27;,&#x27;icon iconfont iconstar&#x27;],</span><br><span class=\"line\">      colors:[&#x27;#FFC300&#x27;,&#x27;#FFC300&#x27;,&#x27;#FFC300&#x27;]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><font face=\"STCAIYUN\" size=\"3\">antd 的改造很顺利就完成了，但是element 的星星一直不出来，遇到的问题就是iconfont icon 引入后，没有展示出来：</font></p>\n<p><font face=\"STCAIYUN\" size=\"3\">主要是在iconfont 的使用上，先进行引入，如下图，将css js 文件分别在模板html 中进行引入</font></p>\n<p><img src=\"/images/iconfont.png\"></p>\n<p><font face=\"STCAIYUN\" size=\"3\">注意的点是iconClasses 这个里面填入的name 不要是在iconfont 网站上复制得到的，这是显示不出来的,它得到的是：iconstar  ，与at.alicnd.com 引用的对应有欠缺，所以导致显示不出来，它里面实际对应的是 icon iconfont iconstar ，类型+name 的一个组合</font></p>\n<p><img src=\"/images/star.png\"></p>\n<p><img src=\"/images/name.png\"></p>\n<p><font face=\"STCAIYUN\" size=\"3\">对比方式是在iconfont 网站上点击下载本地，打开demo_index.html 后就可以看到span 标签里面的class 就是实际可显示的。</font></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font face=\"STCAIYUN\" size=\"3\">项目里面使用了React 与 Vue 进行同时开发，React 对应的使用的是Antd,Vue 则是用Element 这些组件库进行开发，在同一个项目下使用这2种框架，本身就依赖了vuera 来进行相互协作，无论是React 嵌入到Vue 里面，还是Vue 嵌入到React 里面，本来Vue 写得不多，所以这边就没有使用vuera 来完成，一个查看评分功能，在React 模块下用antd 的Rate 完成，在Vue 下用Element 的Rate 进行开发，想加深一下Vue 的开发。但是最终导致的结果是，查看评分的弹框，里面的星星大小颜色都不一样，需要统一一下。</font></p>\n<blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">解决思路：<br>1.通过自定义icon ,让星星大小、样色一样 ,<br>  2.antd 的 Rate 使用character、element 的 Rate 使用icon-classes，<br>  3.使用iconfont 配合完成</font></p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">antd Rate：</span><br><span class=\"line\">  // 非自定义：&lt;Rate value=&#123;subItem.value&#125; disabled count=&#123;item.name === &#x27;增值评分&#x27;?3:5&#125;/&gt;</span><br><span class=\"line\">  &lt;Rate value=&#123;subItem.value&#125; disabled count=&#123;item.name === &#x27;增值评分&#x27;?3:5&#125; character=&#123;()=&gt;&lt;IconSvg type=&quot;iconstar&quot; style=&#123;&#123; color: &#x27;#ffc300&#x27; &#125;&#125; /&gt;&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  // IconSvg 解析 阿里iconfont </span><br><span class=\"line\">  const IconSvg = (props:&#123; type: string, className?:string, style?:any&#125;) =&gt; &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;svg className=&#123;`icon $&#123;props.className || &#x27;&#x27;&#125;`&#125; aria-hidden=&quot;true&quot; style=&#123;props.style&#125;&gt;</span><br><span class=\"line\">        &lt;use xlinkHref=&#123;`#$&#123;props.type&#125;`&#125;&gt;&lt;/use&gt;</span><br><span class=\"line\">      &lt;/svg&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  export default IconSvg</span><br><span class=\"line\"></span><br><span class=\"line\">element Rate:</span><br><span class=\"line\">  // 非自定义：&lt;el-rate v-model=&quot;subItem.value&quot; disabled :max=&quot;item.name === &#x27;增值评分&#x27;?3:5&quot;&gt;&lt;/el-rate&gt;</span><br><span class=\"line\">  &lt;el-rate v-model=&quot;subItem.value&quot; disabled :max=&quot;item.name === &#x27;增值评分&#x27;?3:5&quot; :icon-classes=&quot;iconClasses&quot; void-icon-class=&quot;icon-rate-face-off&quot; :colors=&quot;colors&quot;&gt;</span><br><span class=\"line\">  &lt;/el-rate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  // javascript</span><br><span class=\"line\">  name: &#x27;check-rate&#x27;,</span><br><span class=\"line\">  props: [&#x27;rate&#x27;, &#x27;mark&#x27;],</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      iconClasses: [&#x27;icon iconfont iconstar&#x27;,&#x27;icon iconfont iconstar&#x27;,&#x27;icon iconfont iconstar&#x27;],</span><br><span class=\"line\">      colors:[&#x27;#FFC300&#x27;,&#x27;#FFC300&#x27;,&#x27;#FFC300&#x27;]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><font face=\"STCAIYUN\" size=\"3\">antd 的改造很顺利就完成了，但是element 的星星一直不出来，遇到的问题就是iconfont icon 引入后，没有展示出来：</font></p>\n<p><font face=\"STCAIYUN\" size=\"3\">主要是在iconfont 的使用上，先进行引入，如下图，将css js 文件分别在模板html 中进行引入</font></p>\n<p><img src=\"/images/iconfont.png\"></p>\n<p><font face=\"STCAIYUN\" size=\"3\">注意的点是iconClasses 这个里面填入的name 不要是在iconfont 网站上复制得到的，这是显示不出来的,它得到的是：iconstar  ，与at.alicnd.com 引用的对应有欠缺，所以导致显示不出来，它里面实际对应的是 icon iconfont iconstar ，类型+name 的一个组合</font></p>\n<p><img src=\"/images/star.png\"></p>\n<p><img src=\"/images/name.png\"></p>\n<p><font face=\"STCAIYUN\" size=\"3\">对比方式是在iconfont 网站上点击下载本地，打开demo_index.html 后就可以看到span 标签里面的class 就是实际可显示的。</font></p>\n"},{"title":"React Hooks","date":"2019-08-20T02:27:46.000Z","_content":"\n###### 1.什么是 Hooks\n\n###### • React 一直都提倡使用函数组件，但是有时候需要使用 state 或者其他一些功能时，只能使用类组件，因为函数组件没有实例，没有生命周期函数，只有类组件才有\n###### • Hooks 是 React 16.8 新增的特性，它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性\n###### • 如果你在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须将其它转化为 class。现在你可以直接在现有的函数组件中使用 Hooks \n###### • 凡是 use 开头的 React API  都是 Hooks\n\n\n###### 2.Hooks 解决的问题\n>1. 类组件的不足\n###### • 状态逻辑难复用：在组件之间复用状态逻辑很难，可能要用到 render props （渲染属性）或者 HOC（高阶组件），但无论是渲染属性，还是高阶组件，都会在原先的组件外包裹一层父容器（一般都是 div 元素），导致层级冗余、趋向复杂难以维护\n###### • 在生命周期函数中混杂不相干的逻辑（如：在 componentDidMount 中注册事件以及其他的逻辑，在 componentWillUnmount 中卸载事件，这样分散不集中的写法，很容易写出 bug ）\n###### • 类组件中到处都是对状态的访问和处理，导致组件难以拆分成更小的组件\n###### • this 指向问题：父组件给子组件传递函数时，必须绑定 this \n###### • react 中的组件四种绑定 this 方法的区别\n\n```\n\nclass App extends React.Component<any, any> {\n    handleClick2;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            num: 1,\n            title: ' react study'\n        };\n        this.handleClick2 = this.handleClick1.bind(this);\n    }\n\n    handleClick1() {\n        this.setState({\n            num: this.state.num + 1,\n        })\n    }\n\n    handleClick3 = () => {\n        this.setState({\n            num: this.state.num + 1,\n        })\n    };\n\n    render() {\n        return (<div>\n            <h2>Ann, {this.state.num}</h2>\n            <button onClick={this.handleClick2}>btn1</button>\n            <button onClick={this.handleClick1.bind(this)}>btn2</button>\n            <button onClick={() => this.handleClick1()}>btn3</button>\n            <button onClick={this.handleClick3}>btn4</button>\n        </div>)\n    }\n}\n```\n\n>子组件内部做了性能优化，如（React.PureComponent）\n###### • 第一种是在构造函数中绑定 this：那么每次父组件刷新的时候，如果传递给子组件其他的 props 值不变，那么子组件就不会刷新；\n###### • 第二种是在 render() 函数里面绑定 this：因为 bind 函数会返回一个新的函数，所以每次父组件刷新时，都会重新生成一个函数，即使父组件传递给子组件其他的 props 值不变，子组件每次都会刷新；\n###### • 第三种是使用箭头函数：父组件刷新的时候，即使两个箭头函数的函数体是一样的，都会生成一个新的箭头函数，所以子组件每次都会刷新；\n###### • 第四种是使用类的静态属性：原理和第一种方法差不多，比第一种更简洁\n\n>综上所述，如果不注意的话，很容易写成第三种写法，导致性能上有所损耗。\n\n>2. Hooks 优势\n###### • 能优化类组件的三大问题\n###### • 能在无需修改组件结构的情况下复用状态逻辑（自定义 Hooks ）\n###### • 能将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）\n###### • 副作用的关注点分离：副作用指那些没有发生在数据向视图转换过程中的逻辑，如 ajax 请求、访问原生 dom 元素、本地持久化缓存、绑定/解绑事件、添加订阅、设置定时器、记录日志等。以往这些副作用都是写在类组件生命周期函数中的。而 useEffect 在全部渲染完毕后才会执行，useLayoutEffect 会在浏览器 layout 之后，painting 之前执行。","source":"_posts/five.md","raw":"---\ntitle: React Hooks\ndate: 2019-08-20 10:27:46\ntags:\n---\n\n###### 1.什么是 Hooks\n\n###### • React 一直都提倡使用函数组件，但是有时候需要使用 state 或者其他一些功能时，只能使用类组件，因为函数组件没有实例，没有生命周期函数，只有类组件才有\n###### • Hooks 是 React 16.8 新增的特性，它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性\n###### • 如果你在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须将其它转化为 class。现在你可以直接在现有的函数组件中使用 Hooks \n###### • 凡是 use 开头的 React API  都是 Hooks\n\n\n###### 2.Hooks 解决的问题\n>1. 类组件的不足\n###### • 状态逻辑难复用：在组件之间复用状态逻辑很难，可能要用到 render props （渲染属性）或者 HOC（高阶组件），但无论是渲染属性，还是高阶组件，都会在原先的组件外包裹一层父容器（一般都是 div 元素），导致层级冗余、趋向复杂难以维护\n###### • 在生命周期函数中混杂不相干的逻辑（如：在 componentDidMount 中注册事件以及其他的逻辑，在 componentWillUnmount 中卸载事件，这样分散不集中的写法，很容易写出 bug ）\n###### • 类组件中到处都是对状态的访问和处理，导致组件难以拆分成更小的组件\n###### • this 指向问题：父组件给子组件传递函数时，必须绑定 this \n###### • react 中的组件四种绑定 this 方法的区别\n\n```\n\nclass App extends React.Component<any, any> {\n    handleClick2;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            num: 1,\n            title: ' react study'\n        };\n        this.handleClick2 = this.handleClick1.bind(this);\n    }\n\n    handleClick1() {\n        this.setState({\n            num: this.state.num + 1,\n        })\n    }\n\n    handleClick3 = () => {\n        this.setState({\n            num: this.state.num + 1,\n        })\n    };\n\n    render() {\n        return (<div>\n            <h2>Ann, {this.state.num}</h2>\n            <button onClick={this.handleClick2}>btn1</button>\n            <button onClick={this.handleClick1.bind(this)}>btn2</button>\n            <button onClick={() => this.handleClick1()}>btn3</button>\n            <button onClick={this.handleClick3}>btn4</button>\n        </div>)\n    }\n}\n```\n\n>子组件内部做了性能优化，如（React.PureComponent）\n###### • 第一种是在构造函数中绑定 this：那么每次父组件刷新的时候，如果传递给子组件其他的 props 值不变，那么子组件就不会刷新；\n###### • 第二种是在 render() 函数里面绑定 this：因为 bind 函数会返回一个新的函数，所以每次父组件刷新时，都会重新生成一个函数，即使父组件传递给子组件其他的 props 值不变，子组件每次都会刷新；\n###### • 第三种是使用箭头函数：父组件刷新的时候，即使两个箭头函数的函数体是一样的，都会生成一个新的箭头函数，所以子组件每次都会刷新；\n###### • 第四种是使用类的静态属性：原理和第一种方法差不多，比第一种更简洁\n\n>综上所述，如果不注意的话，很容易写成第三种写法，导致性能上有所损耗。\n\n>2. Hooks 优势\n###### • 能优化类组件的三大问题\n###### • 能在无需修改组件结构的情况下复用状态逻辑（自定义 Hooks ）\n###### • 能将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）\n###### • 副作用的关注点分离：副作用指那些没有发生在数据向视图转换过程中的逻辑，如 ajax 请求、访问原生 dom 元素、本地持久化缓存、绑定/解绑事件、添加订阅、设置定时器、记录日志等。以往这些副作用都是写在类组件生命周期函数中的。而 useEffect 在全部渲染完毕后才会执行，useLayoutEffect 会在浏览器 layout 之后，painting 之前执行。","slug":"five","published":1,"updated":"2023-01-28T07:13:35.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfq6eiy0003riyo5f9k85s0","content":"<h6 id=\"1-什么是-Hooks\"><a href=\"#1-什么是-Hooks\" class=\"headerlink\" title=\"1.什么是 Hooks\"></a>1.什么是 Hooks</h6><h6 id=\"•-React-一直都提倡使用函数组件，但是有时候需要使用-state-或者其他一些功能时，只能使用类组件，因为函数组件没有实例，没有生命周期函数，只有类组件才有\"><a href=\"#•-React-一直都提倡使用函数组件，但是有时候需要使用-state-或者其他一些功能时，只能使用类组件，因为函数组件没有实例，没有生命周期函数，只有类组件才有\" class=\"headerlink\" title=\"• React 一直都提倡使用函数组件，但是有时候需要使用 state 或者其他一些功能时，只能使用类组件，因为函数组件没有实例，没有生命周期函数，只有类组件才有\"></a>• React 一直都提倡使用函数组件，但是有时候需要使用 state 或者其他一些功能时，只能使用类组件，因为函数组件没有实例，没有生命周期函数，只有类组件才有</h6><h6 id=\"•-Hooks-是-React-16-8-新增的特性，它可以让你在不编写-class-的情况下使用-state-以及其他的-React-特性\"><a href=\"#•-Hooks-是-React-16-8-新增的特性，它可以让你在不编写-class-的情况下使用-state-以及其他的-React-特性\" class=\"headerlink\" title=\"• Hooks 是 React 16.8 新增的特性，它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性\"></a>• Hooks 是 React 16.8 新增的特性，它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性</h6><h6 id=\"•-如果你在编写函数组件并意识到需要向其添加一些-state，以前的做法是必须将其它转化为-class。现在你可以直接在现有的函数组件中使用-Hooks\"><a href=\"#•-如果你在编写函数组件并意识到需要向其添加一些-state，以前的做法是必须将其它转化为-class。现在你可以直接在现有的函数组件中使用-Hooks\" class=\"headerlink\" title=\"• 如果你在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须将其它转化为 class。现在你可以直接在现有的函数组件中使用 Hooks\"></a>• 如果你在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须将其它转化为 class。现在你可以直接在现有的函数组件中使用 Hooks</h6><h6 id=\"•-凡是-use-开头的-React-API-都是-Hooks\"><a href=\"#•-凡是-use-开头的-React-API-都是-Hooks\" class=\"headerlink\" title=\"• 凡是 use 开头的 React API  都是 Hooks\"></a>• 凡是 use 开头的 React API  都是 Hooks</h6><h6 id=\"2-Hooks-解决的问题\"><a href=\"#2-Hooks-解决的问题\" class=\"headerlink\" title=\"2.Hooks 解决的问题\"></a>2.Hooks 解决的问题</h6><blockquote>\n<ol>\n<li>类组件的不足</li>\n</ol>\n</blockquote>\n<h6 id=\"•-状态逻辑难复用：在组件之间复用状态逻辑很难，可能要用到-render-props-（渲染属性）或者-HOC（高阶组件），但无论是渲染属性，还是高阶组件，都会在原先的组件外包裹一层父容器（一般都是-div-元素），导致层级冗余、趋向复杂难以维护\"><a href=\"#•-状态逻辑难复用：在组件之间复用状态逻辑很难，可能要用到-render-props-（渲染属性）或者-HOC（高阶组件），但无论是渲染属性，还是高阶组件，都会在原先的组件外包裹一层父容器（一般都是-div-元素），导致层级冗余、趋向复杂难以维护\" class=\"headerlink\" title=\"• 状态逻辑难复用：在组件之间复用状态逻辑很难，可能要用到 render props （渲染属性）或者 HOC（高阶组件），但无论是渲染属性，还是高阶组件，都会在原先的组件外包裹一层父容器（一般都是 div 元素），导致层级冗余、趋向复杂难以维护\"></a>• 状态逻辑难复用：在组件之间复用状态逻辑很难，可能要用到 render props （渲染属性）或者 HOC（高阶组件），但无论是渲染属性，还是高阶组件，都会在原先的组件外包裹一层父容器（一般都是 div 元素），导致层级冗余、趋向复杂难以维护</h6><h6 id=\"•-在生命周期函数中混杂不相干的逻辑（如：在-componentDidMount-中注册事件以及其他的逻辑，在-componentWillUnmount-中卸载事件，这样分散不集中的写法，很容易写出-bug-）\"><a href=\"#•-在生命周期函数中混杂不相干的逻辑（如：在-componentDidMount-中注册事件以及其他的逻辑，在-componentWillUnmount-中卸载事件，这样分散不集中的写法，很容易写出-bug-）\" class=\"headerlink\" title=\"• 在生命周期函数中混杂不相干的逻辑（如：在 componentDidMount 中注册事件以及其他的逻辑，在 componentWillUnmount 中卸载事件，这样分散不集中的写法，很容易写出 bug ）\"></a>• 在生命周期函数中混杂不相干的逻辑（如：在 componentDidMount 中注册事件以及其他的逻辑，在 componentWillUnmount 中卸载事件，这样分散不集中的写法，很容易写出 bug ）</h6><h6 id=\"•-类组件中到处都是对状态的访问和处理，导致组件难以拆分成更小的组件\"><a href=\"#•-类组件中到处都是对状态的访问和处理，导致组件难以拆分成更小的组件\" class=\"headerlink\" title=\"• 类组件中到处都是对状态的访问和处理，导致组件难以拆分成更小的组件\"></a>• 类组件中到处都是对状态的访问和处理，导致组件难以拆分成更小的组件</h6><h6 id=\"•-this-指向问题：父组件给子组件传递函数时，必须绑定-this\"><a href=\"#•-this-指向问题：父组件给子组件传递函数时，必须绑定-this\" class=\"headerlink\" title=\"• this 指向问题：父组件给子组件传递函数时，必须绑定 this\"></a>• this 指向问题：父组件给子组件传递函数时，必须绑定 this</h6><h6 id=\"•-react-中的组件四种绑定-this-方法的区别\"><a href=\"#•-react-中的组件四种绑定-this-方法的区别\" class=\"headerlink\" title=\"• react 中的组件四种绑定 this 方法的区别\"></a>• react 中的组件四种绑定 this 方法的区别</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class App extends React.Component&lt;any, any&gt; &#123;</span><br><span class=\"line\">    handleClick2;</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">        this.state = &#123;</span><br><span class=\"line\">            num: 1,</span><br><span class=\"line\">            title: &#x27; react study&#x27;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        this.handleClick2 = this.handleClick1.bind(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    handleClick1() &#123;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            num: this.state.num + 1,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    handleClick3 = () =&gt; &#123;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            num: this.state.num + 1,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (&lt;div&gt;</span><br><span class=\"line\">            &lt;h2&gt;Ann, &#123;this.state.num&#125;&lt;/h2&gt;</span><br><span class=\"line\">            &lt;button onClick=&#123;this.handleClick2&#125;&gt;btn1&lt;/button&gt;</span><br><span class=\"line\">            &lt;button onClick=&#123;this.handleClick1.bind(this)&#125;&gt;btn2&lt;/button&gt;</span><br><span class=\"line\">            &lt;button onClick=&#123;() =&gt; this.handleClick1()&#125;&gt;btn3&lt;/button&gt;</span><br><span class=\"line\">            &lt;button onClick=&#123;this.handleClick3&#125;&gt;btn4&lt;/button&gt;</span><br><span class=\"line\">        &lt;/div&gt;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>子组件内部做了性能优化，如（React.PureComponent）</p>\n</blockquote>\n<h6 id=\"•-第一种是在构造函数中绑定-this：那么每次父组件刷新的时候，如果传递给子组件其他的-props-值不变，那么子组件就不会刷新；\"><a href=\"#•-第一种是在构造函数中绑定-this：那么每次父组件刷新的时候，如果传递给子组件其他的-props-值不变，那么子组件就不会刷新；\" class=\"headerlink\" title=\"• 第一种是在构造函数中绑定 this：那么每次父组件刷新的时候，如果传递给子组件其他的 props 值不变，那么子组件就不会刷新；\"></a>• 第一种是在构造函数中绑定 this：那么每次父组件刷新的时候，如果传递给子组件其他的 props 值不变，那么子组件就不会刷新；</h6><h6 id=\"•-第二种是在-render-函数里面绑定-this：因为-bind-函数会返回一个新的函数，所以每次父组件刷新时，都会重新生成一个函数，即使父组件传递给子组件其他的-props-值不变，子组件每次都会刷新；\"><a href=\"#•-第二种是在-render-函数里面绑定-this：因为-bind-函数会返回一个新的函数，所以每次父组件刷新时，都会重新生成一个函数，即使父组件传递给子组件其他的-props-值不变，子组件每次都会刷新；\" class=\"headerlink\" title=\"• 第二种是在 render() 函数里面绑定 this：因为 bind 函数会返回一个新的函数，所以每次父组件刷新时，都会重新生成一个函数，即使父组件传递给子组件其他的 props 值不变，子组件每次都会刷新；\"></a>• 第二种是在 render() 函数里面绑定 this：因为 bind 函数会返回一个新的函数，所以每次父组件刷新时，都会重新生成一个函数，即使父组件传递给子组件其他的 props 值不变，子组件每次都会刷新；</h6><h6 id=\"•-第三种是使用箭头函数：父组件刷新的时候，即使两个箭头函数的函数体是一样的，都会生成一个新的箭头函数，所以子组件每次都会刷新；\"><a href=\"#•-第三种是使用箭头函数：父组件刷新的时候，即使两个箭头函数的函数体是一样的，都会生成一个新的箭头函数，所以子组件每次都会刷新；\" class=\"headerlink\" title=\"• 第三种是使用箭头函数：父组件刷新的时候，即使两个箭头函数的函数体是一样的，都会生成一个新的箭头函数，所以子组件每次都会刷新；\"></a>• 第三种是使用箭头函数：父组件刷新的时候，即使两个箭头函数的函数体是一样的，都会生成一个新的箭头函数，所以子组件每次都会刷新；</h6><h6 id=\"•-第四种是使用类的静态属性：原理和第一种方法差不多，比第一种更简洁\"><a href=\"#•-第四种是使用类的静态属性：原理和第一种方法差不多，比第一种更简洁\" class=\"headerlink\" title=\"• 第四种是使用类的静态属性：原理和第一种方法差不多，比第一种更简洁\"></a>• 第四种是使用类的静态属性：原理和第一种方法差不多，比第一种更简洁</h6><blockquote>\n<p>综上所述，如果不注意的话，很容易写成第三种写法，导致性能上有所损耗。</p>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>Hooks 优势</li>\n</ol>\n</blockquote>\n<h6 id=\"•-能优化类组件的三大问题\"><a href=\"#•-能优化类组件的三大问题\" class=\"headerlink\" title=\"• 能优化类组件的三大问题\"></a>• 能优化类组件的三大问题</h6><h6 id=\"•-能在无需修改组件结构的情况下复用状态逻辑（自定义-Hooks-）\"><a href=\"#•-能在无需修改组件结构的情况下复用状态逻辑（自定义-Hooks-）\" class=\"headerlink\" title=\"• 能在无需修改组件结构的情况下复用状态逻辑（自定义 Hooks ）\"></a>• 能在无需修改组件结构的情况下复用状态逻辑（自定义 Hooks ）</h6><h6 id=\"•-能将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）\"><a href=\"#•-能将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）\" class=\"headerlink\" title=\"• 能将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）\"></a>• 能将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）</h6><h6 id=\"•-副作用的关注点分离：副作用指那些没有发生在数据向视图转换过程中的逻辑，如-ajax-请求、访问原生-dom-元素、本地持久化缓存、绑定-解绑事件、添加订阅、设置定时器、记录日志等。以往这些副作用都是写在类组件生命周期函数中的。而-useEffect-在全部渲染完毕后才会执行，useLayoutEffect-会在浏览器-layout-之后，painting-之前执行。\"><a href=\"#•-副作用的关注点分离：副作用指那些没有发生在数据向视图转换过程中的逻辑，如-ajax-请求、访问原生-dom-元素、本地持久化缓存、绑定-解绑事件、添加订阅、设置定时器、记录日志等。以往这些副作用都是写在类组件生命周期函数中的。而-useEffect-在全部渲染完毕后才会执行，useLayoutEffect-会在浏览器-layout-之后，painting-之前执行。\" class=\"headerlink\" title=\"• 副作用的关注点分离：副作用指那些没有发生在数据向视图转换过程中的逻辑，如 ajax 请求、访问原生 dom 元素、本地持久化缓存、绑定/解绑事件、添加订阅、设置定时器、记录日志等。以往这些副作用都是写在类组件生命周期函数中的。而 useEffect 在全部渲染完毕后才会执行，useLayoutEffect 会在浏览器 layout 之后，painting 之前执行。\"></a>• 副作用的关注点分离：副作用指那些没有发生在数据向视图转换过程中的逻辑，如 ajax 请求、访问原生 dom 元素、本地持久化缓存、绑定/解绑事件、添加订阅、设置定时器、记录日志等。以往这些副作用都是写在类组件生命周期函数中的。而 useEffect 在全部渲染完毕后才会执行，useLayoutEffect 会在浏览器 layout 之后，painting 之前执行。</h6>","site":{"data":{}},"excerpt":"","more":"<h6 id=\"1-什么是-Hooks\"><a href=\"#1-什么是-Hooks\" class=\"headerlink\" title=\"1.什么是 Hooks\"></a>1.什么是 Hooks</h6><h6 id=\"•-React-一直都提倡使用函数组件，但是有时候需要使用-state-或者其他一些功能时，只能使用类组件，因为函数组件没有实例，没有生命周期函数，只有类组件才有\"><a href=\"#•-React-一直都提倡使用函数组件，但是有时候需要使用-state-或者其他一些功能时，只能使用类组件，因为函数组件没有实例，没有生命周期函数，只有类组件才有\" class=\"headerlink\" title=\"• React 一直都提倡使用函数组件，但是有时候需要使用 state 或者其他一些功能时，只能使用类组件，因为函数组件没有实例，没有生命周期函数，只有类组件才有\"></a>• React 一直都提倡使用函数组件，但是有时候需要使用 state 或者其他一些功能时，只能使用类组件，因为函数组件没有实例，没有生命周期函数，只有类组件才有</h6><h6 id=\"•-Hooks-是-React-16-8-新增的特性，它可以让你在不编写-class-的情况下使用-state-以及其他的-React-特性\"><a href=\"#•-Hooks-是-React-16-8-新增的特性，它可以让你在不编写-class-的情况下使用-state-以及其他的-React-特性\" class=\"headerlink\" title=\"• Hooks 是 React 16.8 新增的特性，它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性\"></a>• Hooks 是 React 16.8 新增的特性，它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性</h6><h6 id=\"•-如果你在编写函数组件并意识到需要向其添加一些-state，以前的做法是必须将其它转化为-class。现在你可以直接在现有的函数组件中使用-Hooks\"><a href=\"#•-如果你在编写函数组件并意识到需要向其添加一些-state，以前的做法是必须将其它转化为-class。现在你可以直接在现有的函数组件中使用-Hooks\" class=\"headerlink\" title=\"• 如果你在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须将其它转化为 class。现在你可以直接在现有的函数组件中使用 Hooks\"></a>• 如果你在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须将其它转化为 class。现在你可以直接在现有的函数组件中使用 Hooks</h6><h6 id=\"•-凡是-use-开头的-React-API-都是-Hooks\"><a href=\"#•-凡是-use-开头的-React-API-都是-Hooks\" class=\"headerlink\" title=\"• 凡是 use 开头的 React API  都是 Hooks\"></a>• 凡是 use 开头的 React API  都是 Hooks</h6><h6 id=\"2-Hooks-解决的问题\"><a href=\"#2-Hooks-解决的问题\" class=\"headerlink\" title=\"2.Hooks 解决的问题\"></a>2.Hooks 解决的问题</h6><blockquote>\n<ol>\n<li>类组件的不足</li>\n</ol>\n</blockquote>\n<h6 id=\"•-状态逻辑难复用：在组件之间复用状态逻辑很难，可能要用到-render-props-（渲染属性）或者-HOC（高阶组件），但无论是渲染属性，还是高阶组件，都会在原先的组件外包裹一层父容器（一般都是-div-元素），导致层级冗余、趋向复杂难以维护\"><a href=\"#•-状态逻辑难复用：在组件之间复用状态逻辑很难，可能要用到-render-props-（渲染属性）或者-HOC（高阶组件），但无论是渲染属性，还是高阶组件，都会在原先的组件外包裹一层父容器（一般都是-div-元素），导致层级冗余、趋向复杂难以维护\" class=\"headerlink\" title=\"• 状态逻辑难复用：在组件之间复用状态逻辑很难，可能要用到 render props （渲染属性）或者 HOC（高阶组件），但无论是渲染属性，还是高阶组件，都会在原先的组件外包裹一层父容器（一般都是 div 元素），导致层级冗余、趋向复杂难以维护\"></a>• 状态逻辑难复用：在组件之间复用状态逻辑很难，可能要用到 render props （渲染属性）或者 HOC（高阶组件），但无论是渲染属性，还是高阶组件，都会在原先的组件外包裹一层父容器（一般都是 div 元素），导致层级冗余、趋向复杂难以维护</h6><h6 id=\"•-在生命周期函数中混杂不相干的逻辑（如：在-componentDidMount-中注册事件以及其他的逻辑，在-componentWillUnmount-中卸载事件，这样分散不集中的写法，很容易写出-bug-）\"><a href=\"#•-在生命周期函数中混杂不相干的逻辑（如：在-componentDidMount-中注册事件以及其他的逻辑，在-componentWillUnmount-中卸载事件，这样分散不集中的写法，很容易写出-bug-）\" class=\"headerlink\" title=\"• 在生命周期函数中混杂不相干的逻辑（如：在 componentDidMount 中注册事件以及其他的逻辑，在 componentWillUnmount 中卸载事件，这样分散不集中的写法，很容易写出 bug ）\"></a>• 在生命周期函数中混杂不相干的逻辑（如：在 componentDidMount 中注册事件以及其他的逻辑，在 componentWillUnmount 中卸载事件，这样分散不集中的写法，很容易写出 bug ）</h6><h6 id=\"•-类组件中到处都是对状态的访问和处理，导致组件难以拆分成更小的组件\"><a href=\"#•-类组件中到处都是对状态的访问和处理，导致组件难以拆分成更小的组件\" class=\"headerlink\" title=\"• 类组件中到处都是对状态的访问和处理，导致组件难以拆分成更小的组件\"></a>• 类组件中到处都是对状态的访问和处理，导致组件难以拆分成更小的组件</h6><h6 id=\"•-this-指向问题：父组件给子组件传递函数时，必须绑定-this\"><a href=\"#•-this-指向问题：父组件给子组件传递函数时，必须绑定-this\" class=\"headerlink\" title=\"• this 指向问题：父组件给子组件传递函数时，必须绑定 this\"></a>• this 指向问题：父组件给子组件传递函数时，必须绑定 this</h6><h6 id=\"•-react-中的组件四种绑定-this-方法的区别\"><a href=\"#•-react-中的组件四种绑定-this-方法的区别\" class=\"headerlink\" title=\"• react 中的组件四种绑定 this 方法的区别\"></a>• react 中的组件四种绑定 this 方法的区别</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class App extends React.Component&lt;any, any&gt; &#123;</span><br><span class=\"line\">    handleClick2;</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">        this.state = &#123;</span><br><span class=\"line\">            num: 1,</span><br><span class=\"line\">            title: &#x27; react study&#x27;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        this.handleClick2 = this.handleClick1.bind(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    handleClick1() &#123;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            num: this.state.num + 1,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    handleClick3 = () =&gt; &#123;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            num: this.state.num + 1,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (&lt;div&gt;</span><br><span class=\"line\">            &lt;h2&gt;Ann, &#123;this.state.num&#125;&lt;/h2&gt;</span><br><span class=\"line\">            &lt;button onClick=&#123;this.handleClick2&#125;&gt;btn1&lt;/button&gt;</span><br><span class=\"line\">            &lt;button onClick=&#123;this.handleClick1.bind(this)&#125;&gt;btn2&lt;/button&gt;</span><br><span class=\"line\">            &lt;button onClick=&#123;() =&gt; this.handleClick1()&#125;&gt;btn3&lt;/button&gt;</span><br><span class=\"line\">            &lt;button onClick=&#123;this.handleClick3&#125;&gt;btn4&lt;/button&gt;</span><br><span class=\"line\">        &lt;/div&gt;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>子组件内部做了性能优化，如（React.PureComponent）</p>\n</blockquote>\n<h6 id=\"•-第一种是在构造函数中绑定-this：那么每次父组件刷新的时候，如果传递给子组件其他的-props-值不变，那么子组件就不会刷新；\"><a href=\"#•-第一种是在构造函数中绑定-this：那么每次父组件刷新的时候，如果传递给子组件其他的-props-值不变，那么子组件就不会刷新；\" class=\"headerlink\" title=\"• 第一种是在构造函数中绑定 this：那么每次父组件刷新的时候，如果传递给子组件其他的 props 值不变，那么子组件就不会刷新；\"></a>• 第一种是在构造函数中绑定 this：那么每次父组件刷新的时候，如果传递给子组件其他的 props 值不变，那么子组件就不会刷新；</h6><h6 id=\"•-第二种是在-render-函数里面绑定-this：因为-bind-函数会返回一个新的函数，所以每次父组件刷新时，都会重新生成一个函数，即使父组件传递给子组件其他的-props-值不变，子组件每次都会刷新；\"><a href=\"#•-第二种是在-render-函数里面绑定-this：因为-bind-函数会返回一个新的函数，所以每次父组件刷新时，都会重新生成一个函数，即使父组件传递给子组件其他的-props-值不变，子组件每次都会刷新；\" class=\"headerlink\" title=\"• 第二种是在 render() 函数里面绑定 this：因为 bind 函数会返回一个新的函数，所以每次父组件刷新时，都会重新生成一个函数，即使父组件传递给子组件其他的 props 值不变，子组件每次都会刷新；\"></a>• 第二种是在 render() 函数里面绑定 this：因为 bind 函数会返回一个新的函数，所以每次父组件刷新时，都会重新生成一个函数，即使父组件传递给子组件其他的 props 值不变，子组件每次都会刷新；</h6><h6 id=\"•-第三种是使用箭头函数：父组件刷新的时候，即使两个箭头函数的函数体是一样的，都会生成一个新的箭头函数，所以子组件每次都会刷新；\"><a href=\"#•-第三种是使用箭头函数：父组件刷新的时候，即使两个箭头函数的函数体是一样的，都会生成一个新的箭头函数，所以子组件每次都会刷新；\" class=\"headerlink\" title=\"• 第三种是使用箭头函数：父组件刷新的时候，即使两个箭头函数的函数体是一样的，都会生成一个新的箭头函数，所以子组件每次都会刷新；\"></a>• 第三种是使用箭头函数：父组件刷新的时候，即使两个箭头函数的函数体是一样的，都会生成一个新的箭头函数，所以子组件每次都会刷新；</h6><h6 id=\"•-第四种是使用类的静态属性：原理和第一种方法差不多，比第一种更简洁\"><a href=\"#•-第四种是使用类的静态属性：原理和第一种方法差不多，比第一种更简洁\" class=\"headerlink\" title=\"• 第四种是使用类的静态属性：原理和第一种方法差不多，比第一种更简洁\"></a>• 第四种是使用类的静态属性：原理和第一种方法差不多，比第一种更简洁</h6><blockquote>\n<p>综上所述，如果不注意的话，很容易写成第三种写法，导致性能上有所损耗。</p>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>Hooks 优势</li>\n</ol>\n</blockquote>\n<h6 id=\"•-能优化类组件的三大问题\"><a href=\"#•-能优化类组件的三大问题\" class=\"headerlink\" title=\"• 能优化类组件的三大问题\"></a>• 能优化类组件的三大问题</h6><h6 id=\"•-能在无需修改组件结构的情况下复用状态逻辑（自定义-Hooks-）\"><a href=\"#•-能在无需修改组件结构的情况下复用状态逻辑（自定义-Hooks-）\" class=\"headerlink\" title=\"• 能在无需修改组件结构的情况下复用状态逻辑（自定义 Hooks ）\"></a>• 能在无需修改组件结构的情况下复用状态逻辑（自定义 Hooks ）</h6><h6 id=\"•-能将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）\"><a href=\"#•-能将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）\" class=\"headerlink\" title=\"• 能将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）\"></a>• 能将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）</h6><h6 id=\"•-副作用的关注点分离：副作用指那些没有发生在数据向视图转换过程中的逻辑，如-ajax-请求、访问原生-dom-元素、本地持久化缓存、绑定-解绑事件、添加订阅、设置定时器、记录日志等。以往这些副作用都是写在类组件生命周期函数中的。而-useEffect-在全部渲染完毕后才会执行，useLayoutEffect-会在浏览器-layout-之后，painting-之前执行。\"><a href=\"#•-副作用的关注点分离：副作用指那些没有发生在数据向视图转换过程中的逻辑，如-ajax-请求、访问原生-dom-元素、本地持久化缓存、绑定-解绑事件、添加订阅、设置定时器、记录日志等。以往这些副作用都是写在类组件生命周期函数中的。而-useEffect-在全部渲染完毕后才会执行，useLayoutEffect-会在浏览器-layout-之后，painting-之前执行。\" class=\"headerlink\" title=\"• 副作用的关注点分离：副作用指那些没有发生在数据向视图转换过程中的逻辑，如 ajax 请求、访问原生 dom 元素、本地持久化缓存、绑定/解绑事件、添加订阅、设置定时器、记录日志等。以往这些副作用都是写在类组件生命周期函数中的。而 useEffect 在全部渲染完毕后才会执行，useLayoutEffect 会在浏览器 layout 之后，painting 之前执行。\"></a>• 副作用的关注点分离：副作用指那些没有发生在数据向视图转换过程中的逻辑，如 ajax 请求、访问原生 dom 元素、本地持久化缓存、绑定/解绑事件、添加订阅、设置定时器、记录日志等。以往这些副作用都是写在类组件生命周期函数中的。而 useEffect 在全部渲染完毕后才会执行，useLayoutEffect 会在浏览器 layout 之后，painting 之前执行。</h6>"},{"title":"基于webpack 打包的正确选择","date":"2019-10-31T05:27:46.000Z","_content":"为了方便其他开发者使用组件库，开发的 Vue 组件库在发布之前需要对其打包。本文基于 Webpack 讨论打包 Vue 组件库的正确方法。\n\n##### 选择合适的打包格式\n\n###### 首先，我们必须明确组件库的使用场景。有些场景是直接使用 script 在 HTML 中引入，有些场景是使用打包工具在后台构建。作为组件库，应该兼容这些使用场景。组件库应该保持中立，不应该限定于某种使用方式或者打包工具。例如，虽然 Webpack 很流行，组件库不能声明只支持 Webpack 方式使用，忽略了其他选择。原因在于，打包工具并不只有 webpack，还有 browserify、rollup 等。另外，前端工具发展很快，今年流行的工具明年可能就没人用了，你肯定不希望你的组件库会随着某个工具不流行而消逝吧。回顾下曾经流行的 grunt、glup，一大堆基于它们的插件随着工具本身的不流行而被扔进了垃圾箱。\n\n###### 为了支持多种使用场景，我们需要选择合适的打包格式。常见的打包格式有 CMD、AMD、UMD，CMD只能在 Node 环境执行，AMD 只能在浏览器端执行，UMD 同时支持两种执行环境。显而易见，我们应该选择 UMD 格式。Webpack 中指定输出格式的设置项为 output.libraryTarget，其支持的格式有：\n\n###### • “var” - 以一个变量形式输出： var Library = xxx (default)；\n###### • “this” - 以 this 的一个属性输出： this[“Library”] = xxx；\n###### • “commonjs” - 以 exports 的一个属性输出：exports[“Library”] = xxx；\n###### • “commonjs2” - 以 module.exports 形式输出：module.exports = xxx；\n###### • “amd” - 以 AMD 格式输出；\n###### • “umd” - 同时以 AMD、CommonJS2 和全局属性形式输出。\n\n>以下是 webpack.config.js 中 output 设置的示例：\n\n```\noutput: {\n    path: path.resolve(__dirname, '../dist'),\n    publicPath: '/dist/',\n    filename: 'iview.js',\n    library: 'iview',       // 模块名称\n    libraryTarget: 'umd',   // 输出格式\n    umdNamedDefine: true    // 是否将模块名称作为 AMD 输出的命名空间\n}\n```\n\n>到此，我们解决了组件库输出的问题。\n>但是，！！！上面output配置libraryName：'Iview',可能会出现意想不到的问题\n\n##### 如何打包组件依赖\n\n###### 组件库的使用者会自行导入 Vue，打包的时候，不应该将 Vue 打包进组件库。\n\n###### 在 webpack 中，我们可以将 Vue 设置为 externals，以避免将 Vue 打包进组件库，相应的设置如下：\n\n```\nexternals: {\n    vue: 'vue'\n}\n\n```\n\n###### 啊哈，我们搞定了组件依赖问题。至此，读者可能很皱起眉头开始埋怨我了：这么简单的问题，查下 webpack 文档不就得了，还用得着我啰里啰嗦地写这么多！\n\n###### 事实上，问题往往没有我们想得那么简单！如果你将打包后的组件库以 script 标签形式直接引入，你会发现并不能正常执行，提示 vue 未定义。\n\n###### 为了分析问题，我们将打包的代码前几行拿出来看看：\n\n```\n(function webpackUniversalModuleDefinition(root, factory) {\n    if(typeof exports === 'object' && typeof module === 'object')\n        module.exports = factory(require(\"vue\"));\n    else if(typeof define === 'function' && define.amd)\n        define(\"iview\", [\"vue\"], factory);\n    else if(typeof exports === 'object')\n        exports[\"iview\"] = factory(require(\"vue\"));\n    else\n        root[\"iview\"] = factory(root[\"vue\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_157__) {\n    // ....\n})\n```\n\n>我们可以看见，打包后的代码以 4 种形式声明了 Vue 依赖\n\n######  1. module.exports = factory(require(\"vue\")) - commonjs2 形式；\n######  2.define(\"iview\", [\"vue\"], factory) - AMD 形式；\n######  3.exports[\"iview\"] = factory(require(\"vue\")) - commonjs 形式；\n######  4.root[\"iview\"] = factory(root[\"vue\"]) - 全局变量形式。\n\n###### 以 script 标签形式使用组件时，会同样使用 script 标签导入 Vue。Vue 导入的变量是 “window.Vue” 而不是 “window.vue”，因此会出现 vue 未定义的错误。\n\n>幸好，webpack 可以为各种导入形式设置不同名称，设置如下：\n\n```\nexternals: {\n    vue: {\n        root: 'Vue',\n        commonjs: 'vue',\n        commonjs2: 'vue',\n        amd: 'vue'\n    }\n}\n\n```\n\n>再次打包，你可以发现打包的组件库不管是 script 标签方式还是后端构建，都可以正常工作了。\n\n>最后，帖一个打包 iView 组件库的 webpack 配置：\n```\nvar path = require('path');\nvar webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n        main: './src/index.js'\n    },\n    output: {\n        path: path.resolve(__dirname, '../dist'),\n        publicPath: '/dist/',\n        filename: 'iview.js',\n        library: 'iview',\n        libraryTarget: 'umd',\n        umdNamedDefine: true\n    },\n    externals: {\n        vue: {\n            root: 'Vue',\n            commonjs: 'vue',\n            commonjs2: 'vue',\n            amd: 'vue'\n        }\n    },\n    resolve: {\n        extensions: ['', '.js', '.vue']\n    },\n    module: {\n        loaders: [{\n            test: /\\.vue$/,\n            loader: 'vue'\n        }, {\n            test: /\\.js$/,\n            loader: 'babel',\n            exclude: /node_modules/\n        }, {\n            test: /\\.css$/,\n            loader: 'style!css!autoprefixer'\n        }, {\n            test: /\\.less$/,\n            loader: 'style!css!less'\n        }, {\n            test: /\\.(gif|jpg|png|woff|svg|eot|ttf)\\??.*$/,\n            loader: 'url?limit=8192'\n        }, {\n            test: /\\.(html|tpl)$/,\n            loader: 'vue-html'\n        }]\n    },\n    plugins: [\n        new webpack.DefinePlugin({\n            'process.env': {\n                NODE_ENV: '\"development\"'\n            }\n        })\n    ]\n}\n```","source":"_posts/four.md","raw":"---\ntitle: 基于webpack 打包的正确选择\ndate: 2019-10-31 13:27:46\ntags:\n---\n为了方便其他开发者使用组件库，开发的 Vue 组件库在发布之前需要对其打包。本文基于 Webpack 讨论打包 Vue 组件库的正确方法。\n\n##### 选择合适的打包格式\n\n###### 首先，我们必须明确组件库的使用场景。有些场景是直接使用 script 在 HTML 中引入，有些场景是使用打包工具在后台构建。作为组件库，应该兼容这些使用场景。组件库应该保持中立，不应该限定于某种使用方式或者打包工具。例如，虽然 Webpack 很流行，组件库不能声明只支持 Webpack 方式使用，忽略了其他选择。原因在于，打包工具并不只有 webpack，还有 browserify、rollup 等。另外，前端工具发展很快，今年流行的工具明年可能就没人用了，你肯定不希望你的组件库会随着某个工具不流行而消逝吧。回顾下曾经流行的 grunt、glup，一大堆基于它们的插件随着工具本身的不流行而被扔进了垃圾箱。\n\n###### 为了支持多种使用场景，我们需要选择合适的打包格式。常见的打包格式有 CMD、AMD、UMD，CMD只能在 Node 环境执行，AMD 只能在浏览器端执行，UMD 同时支持两种执行环境。显而易见，我们应该选择 UMD 格式。Webpack 中指定输出格式的设置项为 output.libraryTarget，其支持的格式有：\n\n###### • “var” - 以一个变量形式输出： var Library = xxx (default)；\n###### • “this” - 以 this 的一个属性输出： this[“Library”] = xxx；\n###### • “commonjs” - 以 exports 的一个属性输出：exports[“Library”] = xxx；\n###### • “commonjs2” - 以 module.exports 形式输出：module.exports = xxx；\n###### • “amd” - 以 AMD 格式输出；\n###### • “umd” - 同时以 AMD、CommonJS2 和全局属性形式输出。\n\n>以下是 webpack.config.js 中 output 设置的示例：\n\n```\noutput: {\n    path: path.resolve(__dirname, '../dist'),\n    publicPath: '/dist/',\n    filename: 'iview.js',\n    library: 'iview',       // 模块名称\n    libraryTarget: 'umd',   // 输出格式\n    umdNamedDefine: true    // 是否将模块名称作为 AMD 输出的命名空间\n}\n```\n\n>到此，我们解决了组件库输出的问题。\n>但是，！！！上面output配置libraryName：'Iview',可能会出现意想不到的问题\n\n##### 如何打包组件依赖\n\n###### 组件库的使用者会自行导入 Vue，打包的时候，不应该将 Vue 打包进组件库。\n\n###### 在 webpack 中，我们可以将 Vue 设置为 externals，以避免将 Vue 打包进组件库，相应的设置如下：\n\n```\nexternals: {\n    vue: 'vue'\n}\n\n```\n\n###### 啊哈，我们搞定了组件依赖问题。至此，读者可能很皱起眉头开始埋怨我了：这么简单的问题，查下 webpack 文档不就得了，还用得着我啰里啰嗦地写这么多！\n\n###### 事实上，问题往往没有我们想得那么简单！如果你将打包后的组件库以 script 标签形式直接引入，你会发现并不能正常执行，提示 vue 未定义。\n\n###### 为了分析问题，我们将打包的代码前几行拿出来看看：\n\n```\n(function webpackUniversalModuleDefinition(root, factory) {\n    if(typeof exports === 'object' && typeof module === 'object')\n        module.exports = factory(require(\"vue\"));\n    else if(typeof define === 'function' && define.amd)\n        define(\"iview\", [\"vue\"], factory);\n    else if(typeof exports === 'object')\n        exports[\"iview\"] = factory(require(\"vue\"));\n    else\n        root[\"iview\"] = factory(root[\"vue\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_157__) {\n    // ....\n})\n```\n\n>我们可以看见，打包后的代码以 4 种形式声明了 Vue 依赖\n\n######  1. module.exports = factory(require(\"vue\")) - commonjs2 形式；\n######  2.define(\"iview\", [\"vue\"], factory) - AMD 形式；\n######  3.exports[\"iview\"] = factory(require(\"vue\")) - commonjs 形式；\n######  4.root[\"iview\"] = factory(root[\"vue\"]) - 全局变量形式。\n\n###### 以 script 标签形式使用组件时，会同样使用 script 标签导入 Vue。Vue 导入的变量是 “window.Vue” 而不是 “window.vue”，因此会出现 vue 未定义的错误。\n\n>幸好，webpack 可以为各种导入形式设置不同名称，设置如下：\n\n```\nexternals: {\n    vue: {\n        root: 'Vue',\n        commonjs: 'vue',\n        commonjs2: 'vue',\n        amd: 'vue'\n    }\n}\n\n```\n\n>再次打包，你可以发现打包的组件库不管是 script 标签方式还是后端构建，都可以正常工作了。\n\n>最后，帖一个打包 iView 组件库的 webpack 配置：\n```\nvar path = require('path');\nvar webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n        main: './src/index.js'\n    },\n    output: {\n        path: path.resolve(__dirname, '../dist'),\n        publicPath: '/dist/',\n        filename: 'iview.js',\n        library: 'iview',\n        libraryTarget: 'umd',\n        umdNamedDefine: true\n    },\n    externals: {\n        vue: {\n            root: 'Vue',\n            commonjs: 'vue',\n            commonjs2: 'vue',\n            amd: 'vue'\n        }\n    },\n    resolve: {\n        extensions: ['', '.js', '.vue']\n    },\n    module: {\n        loaders: [{\n            test: /\\.vue$/,\n            loader: 'vue'\n        }, {\n            test: /\\.js$/,\n            loader: 'babel',\n            exclude: /node_modules/\n        }, {\n            test: /\\.css$/,\n            loader: 'style!css!autoprefixer'\n        }, {\n            test: /\\.less$/,\n            loader: 'style!css!less'\n        }, {\n            test: /\\.(gif|jpg|png|woff|svg|eot|ttf)\\??.*$/,\n            loader: 'url?limit=8192'\n        }, {\n            test: /\\.(html|tpl)$/,\n            loader: 'vue-html'\n        }]\n    },\n    plugins: [\n        new webpack.DefinePlugin({\n            'process.env': {\n                NODE_ENV: '\"development\"'\n            }\n        })\n    ]\n}\n```","slug":"four","published":1,"updated":"2023-01-28T07:13:35.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfq6eiz0004riyohs6mer9y","content":"<p>为了方便其他开发者使用组件库，开发的 Vue 组件库在发布之前需要对其打包。本文基于 Webpack 讨论打包 Vue 组件库的正确方法。</p>\n<h5 id=\"选择合适的打包格式\"><a href=\"#选择合适的打包格式\" class=\"headerlink\" title=\"选择合适的打包格式\"></a>选择合适的打包格式</h5><h6 id=\"首先，我们必须明确组件库的使用场景。有些场景是直接使用-script-在-HTML-中引入，有些场景是使用打包工具在后台构建。作为组件库，应该兼容这些使用场景。组件库应该保持中立，不应该限定于某种使用方式或者打包工具。例如，虽然-Webpack-很流行，组件库不能声明只支持-Webpack-方式使用，忽略了其他选择。原因在于，打包工具并不只有-webpack，还有-browserify、rollup-等。另外，前端工具发展很快，今年流行的工具明年可能就没人用了，你肯定不希望你的组件库会随着某个工具不流行而消逝吧。回顾下曾经流行的-grunt、glup，一大堆基于它们的插件随着工具本身的不流行而被扔进了垃圾箱。\"><a href=\"#首先，我们必须明确组件库的使用场景。有些场景是直接使用-script-在-HTML-中引入，有些场景是使用打包工具在后台构建。作为组件库，应该兼容这些使用场景。组件库应该保持中立，不应该限定于某种使用方式或者打包工具。例如，虽然-Webpack-很流行，组件库不能声明只支持-Webpack-方式使用，忽略了其他选择。原因在于，打包工具并不只有-webpack，还有-browserify、rollup-等。另外，前端工具发展很快，今年流行的工具明年可能就没人用了，你肯定不希望你的组件库会随着某个工具不流行而消逝吧。回顾下曾经流行的-grunt、glup，一大堆基于它们的插件随着工具本身的不流行而被扔进了垃圾箱。\" class=\"headerlink\" title=\"首先，我们必须明确组件库的使用场景。有些场景是直接使用 script 在 HTML 中引入，有些场景是使用打包工具在后台构建。作为组件库，应该兼容这些使用场景。组件库应该保持中立，不应该限定于某种使用方式或者打包工具。例如，虽然 Webpack 很流行，组件库不能声明只支持 Webpack 方式使用，忽略了其他选择。原因在于，打包工具并不只有 webpack，还有 browserify、rollup 等。另外，前端工具发展很快，今年流行的工具明年可能就没人用了，你肯定不希望你的组件库会随着某个工具不流行而消逝吧。回顾下曾经流行的 grunt、glup，一大堆基于它们的插件随着工具本身的不流行而被扔进了垃圾箱。\"></a>首先，我们必须明确组件库的使用场景。有些场景是直接使用 script 在 HTML 中引入，有些场景是使用打包工具在后台构建。作为组件库，应该兼容这些使用场景。组件库应该保持中立，不应该限定于某种使用方式或者打包工具。例如，虽然 Webpack 很流行，组件库不能声明只支持 Webpack 方式使用，忽略了其他选择。原因在于，打包工具并不只有 webpack，还有 browserify、rollup 等。另外，前端工具发展很快，今年流行的工具明年可能就没人用了，你肯定不希望你的组件库会随着某个工具不流行而消逝吧。回顾下曾经流行的 grunt、glup，一大堆基于它们的插件随着工具本身的不流行而被扔进了垃圾箱。</h6><h6 id=\"为了支持多种使用场景，我们需要选择合适的打包格式。常见的打包格式有-CMD、AMD、UMD，CMD只能在-Node-环境执行，AMD-只能在浏览器端执行，UMD-同时支持两种执行环境。显而易见，我们应该选择-UMD-格式。Webpack-中指定输出格式的设置项为-output-libraryTarget，其支持的格式有：\"><a href=\"#为了支持多种使用场景，我们需要选择合适的打包格式。常见的打包格式有-CMD、AMD、UMD，CMD只能在-Node-环境执行，AMD-只能在浏览器端执行，UMD-同时支持两种执行环境。显而易见，我们应该选择-UMD-格式。Webpack-中指定输出格式的设置项为-output-libraryTarget，其支持的格式有：\" class=\"headerlink\" title=\"为了支持多种使用场景，我们需要选择合适的打包格式。常见的打包格式有 CMD、AMD、UMD，CMD只能在 Node 环境执行，AMD 只能在浏览器端执行，UMD 同时支持两种执行环境。显而易见，我们应该选择 UMD 格式。Webpack 中指定输出格式的设置项为 output.libraryTarget，其支持的格式有：\"></a>为了支持多种使用场景，我们需要选择合适的打包格式。常见的打包格式有 CMD、AMD、UMD，CMD只能在 Node 环境执行，AMD 只能在浏览器端执行，UMD 同时支持两种执行环境。显而易见，我们应该选择 UMD 格式。Webpack 中指定输出格式的设置项为 output.libraryTarget，其支持的格式有：</h6><h6 id=\"•-“var”-以一个变量形式输出：-var-Library-xxx-default-；\"><a href=\"#•-“var”-以一个变量形式输出：-var-Library-xxx-default-；\" class=\"headerlink\" title=\"• “var” - 以一个变量形式输出： var Library = xxx (default)；\"></a>• “var” - 以一个变量形式输出： var Library = xxx (default)；</h6><h6 id=\"•-“this”-以-this-的一个属性输出：-this-“Library”-xxx；\"><a href=\"#•-“this”-以-this-的一个属性输出：-this-“Library”-xxx；\" class=\"headerlink\" title=\"• “this” - 以 this 的一个属性输出： this[“Library”] = xxx；\"></a>• “this” - 以 this 的一个属性输出： this[“Library”] = xxx；</h6><h6 id=\"•-“commonjs”-以-exports-的一个属性输出：exports-“Library”-xxx；\"><a href=\"#•-“commonjs”-以-exports-的一个属性输出：exports-“Library”-xxx；\" class=\"headerlink\" title=\"• “commonjs” - 以 exports 的一个属性输出：exports[“Library”] = xxx；\"></a>• “commonjs” - 以 exports 的一个属性输出：exports[“Library”] = xxx；</h6><h6 id=\"•-“commonjs2”-以-module-exports-形式输出：module-exports-xxx；\"><a href=\"#•-“commonjs2”-以-module-exports-形式输出：module-exports-xxx；\" class=\"headerlink\" title=\"• “commonjs2” - 以 module.exports 形式输出：module.exports = xxx；\"></a>• “commonjs2” - 以 module.exports 形式输出：module.exports = xxx；</h6><h6 id=\"•-“amd”-以-AMD-格式输出；\"><a href=\"#•-“amd”-以-AMD-格式输出；\" class=\"headerlink\" title=\"• “amd” - 以 AMD 格式输出；\"></a>• “amd” - 以 AMD 格式输出；</h6><h6 id=\"•-“umd”-同时以-AMD、CommonJS2-和全局属性形式输出。\"><a href=\"#•-“umd”-同时以-AMD、CommonJS2-和全局属性形式输出。\" class=\"headerlink\" title=\"• “umd” - 同时以 AMD、CommonJS2 和全局属性形式输出。\"></a>• “umd” - 同时以 AMD、CommonJS2 和全局属性形式输出。</h6><blockquote>\n<p>以下是 webpack.config.js 中 output 设置的示例：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, &#x27;../dist&#x27;),</span><br><span class=\"line\">    publicPath: &#x27;/dist/&#x27;,</span><br><span class=\"line\">    filename: &#x27;iview.js&#x27;,</span><br><span class=\"line\">    library: &#x27;iview&#x27;,       // 模块名称</span><br><span class=\"line\">    libraryTarget: &#x27;umd&#x27;,   // 输出格式</span><br><span class=\"line\">    umdNamedDefine: true    // 是否将模块名称作为 AMD 输出的命名空间</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>到此，我们解决了组件库输出的问题。<br>但是，！！！上面output配置libraryName：’Iview’,可能会出现意想不到的问题</p>\n</blockquote>\n<h5 id=\"如何打包组件依赖\"><a href=\"#如何打包组件依赖\" class=\"headerlink\" title=\"如何打包组件依赖\"></a>如何打包组件依赖</h5><h6 id=\"组件库的使用者会自行导入-Vue，打包的时候，不应该将-Vue-打包进组件库。\"><a href=\"#组件库的使用者会自行导入-Vue，打包的时候，不应该将-Vue-打包进组件库。\" class=\"headerlink\" title=\"组件库的使用者会自行导入 Vue，打包的时候，不应该将 Vue 打包进组件库。\"></a>组件库的使用者会自行导入 Vue，打包的时候，不应该将 Vue 打包进组件库。</h6><h6 id=\"在-webpack-中，我们可以将-Vue-设置为-externals，以避免将-Vue-打包进组件库，相应的设置如下：\"><a href=\"#在-webpack-中，我们可以将-Vue-设置为-externals，以避免将-Vue-打包进组件库，相应的设置如下：\" class=\"headerlink\" title=\"在 webpack 中，我们可以将 Vue 设置为 externals，以避免将 Vue 打包进组件库，相应的设置如下：\"></a>在 webpack 中，我们可以将 Vue 设置为 externals，以避免将 Vue 打包进组件库，相应的设置如下：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">externals: &#123;</span><br><span class=\"line\">    vue: &#x27;vue&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"啊哈，我们搞定了组件依赖问题。至此，读者可能很皱起眉头开始埋怨我了：这么简单的问题，查下-webpack-文档不就得了，还用得着我啰里啰嗦地写这么多！\"><a href=\"#啊哈，我们搞定了组件依赖问题。至此，读者可能很皱起眉头开始埋怨我了：这么简单的问题，查下-webpack-文档不就得了，还用得着我啰里啰嗦地写这么多！\" class=\"headerlink\" title=\"啊哈，我们搞定了组件依赖问题。至此，读者可能很皱起眉头开始埋怨我了：这么简单的问题，查下 webpack 文档不就得了，还用得着我啰里啰嗦地写这么多！\"></a>啊哈，我们搞定了组件依赖问题。至此，读者可能很皱起眉头开始埋怨我了：这么简单的问题，查下 webpack 文档不就得了，还用得着我啰里啰嗦地写这么多！</h6><h6 id=\"事实上，问题往往没有我们想得那么简单！如果你将打包后的组件库以-script-标签形式直接引入，你会发现并不能正常执行，提示-vue-未定义。\"><a href=\"#事实上，问题往往没有我们想得那么简单！如果你将打包后的组件库以-script-标签形式直接引入，你会发现并不能正常执行，提示-vue-未定义。\" class=\"headerlink\" title=\"事实上，问题往往没有我们想得那么简单！如果你将打包后的组件库以 script 标签形式直接引入，你会发现并不能正常执行，提示 vue 未定义。\"></a>事实上，问题往往没有我们想得那么简单！如果你将打包后的组件库以 script 标签形式直接引入，你会发现并不能正常执行，提示 vue 未定义。</h6><h6 id=\"为了分析问题，我们将打包的代码前几行拿出来看看：\"><a href=\"#为了分析问题，我们将打包的代码前几行拿出来看看：\" class=\"headerlink\" title=\"为了分析问题，我们将打包的代码前几行拿出来看看：\"></a>为了分析问题，我们将打包的代码前几行拿出来看看：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function webpackUniversalModuleDefinition(root, factory) &#123;</span><br><span class=\"line\">    if(typeof exports === &#x27;object&#x27; &amp;&amp; typeof module === &#x27;object&#x27;)</span><br><span class=\"line\">        module.exports = factory(require(&quot;vue&quot;));</span><br><span class=\"line\">    else if(typeof define === &#x27;function&#x27; &amp;&amp; define.amd)</span><br><span class=\"line\">        define(&quot;iview&quot;, [&quot;vue&quot;], factory);</span><br><span class=\"line\">    else if(typeof exports === &#x27;object&#x27;)</span><br><span class=\"line\">        exports[&quot;iview&quot;] = factory(require(&quot;vue&quot;));</span><br><span class=\"line\">    else</span><br><span class=\"line\">        root[&quot;iview&quot;] = factory(root[&quot;vue&quot;]);</span><br><span class=\"line\">&#125;)(this, function(__WEBPACK_EXTERNAL_MODULE_157__) &#123;</span><br><span class=\"line\">    // ....</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>我们可以看见，打包后的代码以 4 种形式声明了 Vue 依赖</p>\n</blockquote>\n<h6 id=\"1-module-exports-factory-require-“vue”-commonjs2-形式；\"><a href=\"#1-module-exports-factory-require-“vue”-commonjs2-形式；\" class=\"headerlink\" title=\"1. module.exports = factory(require(“vue”)) - commonjs2 形式；\"></a>1. module.exports = factory(require(“vue”)) - commonjs2 形式；</h6><h6 id=\"2-define-“iview”-“vue”-factory-AMD-形式；\"><a href=\"#2-define-“iview”-“vue”-factory-AMD-形式；\" class=\"headerlink\" title=\"2.define(“iview”, [“vue”], factory) - AMD 形式；\"></a>2.define(“iview”, [“vue”], factory) - AMD 形式；</h6><h6 id=\"3-exports-“iview”-factory-require-“vue”-commonjs-形式；\"><a href=\"#3-exports-“iview”-factory-require-“vue”-commonjs-形式；\" class=\"headerlink\" title=\"3.exports[“iview”] = factory(require(“vue”)) - commonjs 形式；\"></a>3.exports[“iview”] = factory(require(“vue”)) - commonjs 形式；</h6><h6 id=\"4-root-“iview”-factory-root-“vue”-全局变量形式。\"><a href=\"#4-root-“iview”-factory-root-“vue”-全局变量形式。\" class=\"headerlink\" title=\"4.root[“iview”] = factory(root[“vue”]) - 全局变量形式。\"></a>4.root[“iview”] = factory(root[“vue”]) - 全局变量形式。</h6><h6 id=\"以-script-标签形式使用组件时，会同样使用-script-标签导入-Vue。Vue-导入的变量是-“window-Vue”-而不是-“window-vue”，因此会出现-vue-未定义的错误。\"><a href=\"#以-script-标签形式使用组件时，会同样使用-script-标签导入-Vue。Vue-导入的变量是-“window-Vue”-而不是-“window-vue”，因此会出现-vue-未定义的错误。\" class=\"headerlink\" title=\"以 script 标签形式使用组件时，会同样使用 script 标签导入 Vue。Vue 导入的变量是 “window.Vue” 而不是 “window.vue”，因此会出现 vue 未定义的错误。\"></a>以 script 标签形式使用组件时，会同样使用 script 标签导入 Vue。Vue 导入的变量是 “window.Vue” 而不是 “window.vue”，因此会出现 vue 未定义的错误。</h6><blockquote>\n<p>幸好，webpack 可以为各种导入形式设置不同名称，设置如下：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">externals: &#123;</span><br><span class=\"line\">    vue: &#123;</span><br><span class=\"line\">        root: &#x27;Vue&#x27;,</span><br><span class=\"line\">        commonjs: &#x27;vue&#x27;,</span><br><span class=\"line\">        commonjs2: &#x27;vue&#x27;,</span><br><span class=\"line\">        amd: &#x27;vue&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>再次打包，你可以发现打包的组件库不管是 script 标签方式还是后端构建，都可以正常工作了。</p>\n</blockquote>\n<blockquote>\n<p>最后，帖一个打包 iView 组件库的 webpack 配置：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var path = require(&#x27;path&#x27;);</span><br><span class=\"line\">var webpack = require(&#x27;webpack&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        main: &#x27;./src/index.js&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, &#x27;../dist&#x27;),</span><br><span class=\"line\">        publicPath: &#x27;/dist/&#x27;,</span><br><span class=\"line\">        filename: &#x27;iview.js&#x27;,</span><br><span class=\"line\">        library: &#x27;iview&#x27;,</span><br><span class=\"line\">        libraryTarget: &#x27;umd&#x27;,</span><br><span class=\"line\">        umdNamedDefine: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    externals: &#123;</span><br><span class=\"line\">        vue: &#123;</span><br><span class=\"line\">            root: &#x27;Vue&#x27;,</span><br><span class=\"line\">            commonjs: &#x27;vue&#x27;,</span><br><span class=\"line\">            commonjs2: &#x27;vue&#x27;,</span><br><span class=\"line\">            amd: &#x27;vue&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        extensions: [&#x27;&#x27;, &#x27;.js&#x27;, &#x27;.vue&#x27;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: /\\.vue$/,</span><br><span class=\"line\">            loader: &#x27;vue&#x27;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: /\\.js$/,</span><br><span class=\"line\">            loader: &#x27;babel&#x27;,</span><br><span class=\"line\">            exclude: /node_modules/</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: /\\.css$/,</span><br><span class=\"line\">            loader: &#x27;style!css!autoprefixer&#x27;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: /\\.less$/,</span><br><span class=\"line\">            loader: &#x27;style!css!less&#x27;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: /\\.(gif|jpg|png|woff|svg|eot|ttf)\\??.*$/,</span><br><span class=\"line\">            loader: &#x27;url?limit=8192&#x27;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: /\\.(html|tpl)$/,</span><br><span class=\"line\">            loader: &#x27;vue-html&#x27;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.DefinePlugin(&#123;</span><br><span class=\"line\">            &#x27;process.env&#x27;: &#123;</span><br><span class=\"line\">                NODE_ENV: &#x27;&quot;development&quot;&#x27;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>为了方便其他开发者使用组件库，开发的 Vue 组件库在发布之前需要对其打包。本文基于 Webpack 讨论打包 Vue 组件库的正确方法。</p>\n<h5 id=\"选择合适的打包格式\"><a href=\"#选择合适的打包格式\" class=\"headerlink\" title=\"选择合适的打包格式\"></a>选择合适的打包格式</h5><h6 id=\"首先，我们必须明确组件库的使用场景。有些场景是直接使用-script-在-HTML-中引入，有些场景是使用打包工具在后台构建。作为组件库，应该兼容这些使用场景。组件库应该保持中立，不应该限定于某种使用方式或者打包工具。例如，虽然-Webpack-很流行，组件库不能声明只支持-Webpack-方式使用，忽略了其他选择。原因在于，打包工具并不只有-webpack，还有-browserify、rollup-等。另外，前端工具发展很快，今年流行的工具明年可能就没人用了，你肯定不希望你的组件库会随着某个工具不流行而消逝吧。回顾下曾经流行的-grunt、glup，一大堆基于它们的插件随着工具本身的不流行而被扔进了垃圾箱。\"><a href=\"#首先，我们必须明确组件库的使用场景。有些场景是直接使用-script-在-HTML-中引入，有些场景是使用打包工具在后台构建。作为组件库，应该兼容这些使用场景。组件库应该保持中立，不应该限定于某种使用方式或者打包工具。例如，虽然-Webpack-很流行，组件库不能声明只支持-Webpack-方式使用，忽略了其他选择。原因在于，打包工具并不只有-webpack，还有-browserify、rollup-等。另外，前端工具发展很快，今年流行的工具明年可能就没人用了，你肯定不希望你的组件库会随着某个工具不流行而消逝吧。回顾下曾经流行的-grunt、glup，一大堆基于它们的插件随着工具本身的不流行而被扔进了垃圾箱。\" class=\"headerlink\" title=\"首先，我们必须明确组件库的使用场景。有些场景是直接使用 script 在 HTML 中引入，有些场景是使用打包工具在后台构建。作为组件库，应该兼容这些使用场景。组件库应该保持中立，不应该限定于某种使用方式或者打包工具。例如，虽然 Webpack 很流行，组件库不能声明只支持 Webpack 方式使用，忽略了其他选择。原因在于，打包工具并不只有 webpack，还有 browserify、rollup 等。另外，前端工具发展很快，今年流行的工具明年可能就没人用了，你肯定不希望你的组件库会随着某个工具不流行而消逝吧。回顾下曾经流行的 grunt、glup，一大堆基于它们的插件随着工具本身的不流行而被扔进了垃圾箱。\"></a>首先，我们必须明确组件库的使用场景。有些场景是直接使用 script 在 HTML 中引入，有些场景是使用打包工具在后台构建。作为组件库，应该兼容这些使用场景。组件库应该保持中立，不应该限定于某种使用方式或者打包工具。例如，虽然 Webpack 很流行，组件库不能声明只支持 Webpack 方式使用，忽略了其他选择。原因在于，打包工具并不只有 webpack，还有 browserify、rollup 等。另外，前端工具发展很快，今年流行的工具明年可能就没人用了，你肯定不希望你的组件库会随着某个工具不流行而消逝吧。回顾下曾经流行的 grunt、glup，一大堆基于它们的插件随着工具本身的不流行而被扔进了垃圾箱。</h6><h6 id=\"为了支持多种使用场景，我们需要选择合适的打包格式。常见的打包格式有-CMD、AMD、UMD，CMD只能在-Node-环境执行，AMD-只能在浏览器端执行，UMD-同时支持两种执行环境。显而易见，我们应该选择-UMD-格式。Webpack-中指定输出格式的设置项为-output-libraryTarget，其支持的格式有：\"><a href=\"#为了支持多种使用场景，我们需要选择合适的打包格式。常见的打包格式有-CMD、AMD、UMD，CMD只能在-Node-环境执行，AMD-只能在浏览器端执行，UMD-同时支持两种执行环境。显而易见，我们应该选择-UMD-格式。Webpack-中指定输出格式的设置项为-output-libraryTarget，其支持的格式有：\" class=\"headerlink\" title=\"为了支持多种使用场景，我们需要选择合适的打包格式。常见的打包格式有 CMD、AMD、UMD，CMD只能在 Node 环境执行，AMD 只能在浏览器端执行，UMD 同时支持两种执行环境。显而易见，我们应该选择 UMD 格式。Webpack 中指定输出格式的设置项为 output.libraryTarget，其支持的格式有：\"></a>为了支持多种使用场景，我们需要选择合适的打包格式。常见的打包格式有 CMD、AMD、UMD，CMD只能在 Node 环境执行，AMD 只能在浏览器端执行，UMD 同时支持两种执行环境。显而易见，我们应该选择 UMD 格式。Webpack 中指定输出格式的设置项为 output.libraryTarget，其支持的格式有：</h6><h6 id=\"•-“var”-以一个变量形式输出：-var-Library-xxx-default-；\"><a href=\"#•-“var”-以一个变量形式输出：-var-Library-xxx-default-；\" class=\"headerlink\" title=\"• “var” - 以一个变量形式输出： var Library = xxx (default)；\"></a>• “var” - 以一个变量形式输出： var Library = xxx (default)；</h6><h6 id=\"•-“this”-以-this-的一个属性输出：-this-“Library”-xxx；\"><a href=\"#•-“this”-以-this-的一个属性输出：-this-“Library”-xxx；\" class=\"headerlink\" title=\"• “this” - 以 this 的一个属性输出： this[“Library”] = xxx；\"></a>• “this” - 以 this 的一个属性输出： this[“Library”] = xxx；</h6><h6 id=\"•-“commonjs”-以-exports-的一个属性输出：exports-“Library”-xxx；\"><a href=\"#•-“commonjs”-以-exports-的一个属性输出：exports-“Library”-xxx；\" class=\"headerlink\" title=\"• “commonjs” - 以 exports 的一个属性输出：exports[“Library”] = xxx；\"></a>• “commonjs” - 以 exports 的一个属性输出：exports[“Library”] = xxx；</h6><h6 id=\"•-“commonjs2”-以-module-exports-形式输出：module-exports-xxx；\"><a href=\"#•-“commonjs2”-以-module-exports-形式输出：module-exports-xxx；\" class=\"headerlink\" title=\"• “commonjs2” - 以 module.exports 形式输出：module.exports = xxx；\"></a>• “commonjs2” - 以 module.exports 形式输出：module.exports = xxx；</h6><h6 id=\"•-“amd”-以-AMD-格式输出；\"><a href=\"#•-“amd”-以-AMD-格式输出；\" class=\"headerlink\" title=\"• “amd” - 以 AMD 格式输出；\"></a>• “amd” - 以 AMD 格式输出；</h6><h6 id=\"•-“umd”-同时以-AMD、CommonJS2-和全局属性形式输出。\"><a href=\"#•-“umd”-同时以-AMD、CommonJS2-和全局属性形式输出。\" class=\"headerlink\" title=\"• “umd” - 同时以 AMD、CommonJS2 和全局属性形式输出。\"></a>• “umd” - 同时以 AMD、CommonJS2 和全局属性形式输出。</h6><blockquote>\n<p>以下是 webpack.config.js 中 output 设置的示例：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, &#x27;../dist&#x27;),</span><br><span class=\"line\">    publicPath: &#x27;/dist/&#x27;,</span><br><span class=\"line\">    filename: &#x27;iview.js&#x27;,</span><br><span class=\"line\">    library: &#x27;iview&#x27;,       // 模块名称</span><br><span class=\"line\">    libraryTarget: &#x27;umd&#x27;,   // 输出格式</span><br><span class=\"line\">    umdNamedDefine: true    // 是否将模块名称作为 AMD 输出的命名空间</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>到此，我们解决了组件库输出的问题。<br>但是，！！！上面output配置libraryName：’Iview’,可能会出现意想不到的问题</p>\n</blockquote>\n<h5 id=\"如何打包组件依赖\"><a href=\"#如何打包组件依赖\" class=\"headerlink\" title=\"如何打包组件依赖\"></a>如何打包组件依赖</h5><h6 id=\"组件库的使用者会自行导入-Vue，打包的时候，不应该将-Vue-打包进组件库。\"><a href=\"#组件库的使用者会自行导入-Vue，打包的时候，不应该将-Vue-打包进组件库。\" class=\"headerlink\" title=\"组件库的使用者会自行导入 Vue，打包的时候，不应该将 Vue 打包进组件库。\"></a>组件库的使用者会自行导入 Vue，打包的时候，不应该将 Vue 打包进组件库。</h6><h6 id=\"在-webpack-中，我们可以将-Vue-设置为-externals，以避免将-Vue-打包进组件库，相应的设置如下：\"><a href=\"#在-webpack-中，我们可以将-Vue-设置为-externals，以避免将-Vue-打包进组件库，相应的设置如下：\" class=\"headerlink\" title=\"在 webpack 中，我们可以将 Vue 设置为 externals，以避免将 Vue 打包进组件库，相应的设置如下：\"></a>在 webpack 中，我们可以将 Vue 设置为 externals，以避免将 Vue 打包进组件库，相应的设置如下：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">externals: &#123;</span><br><span class=\"line\">    vue: &#x27;vue&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"啊哈，我们搞定了组件依赖问题。至此，读者可能很皱起眉头开始埋怨我了：这么简单的问题，查下-webpack-文档不就得了，还用得着我啰里啰嗦地写这么多！\"><a href=\"#啊哈，我们搞定了组件依赖问题。至此，读者可能很皱起眉头开始埋怨我了：这么简单的问题，查下-webpack-文档不就得了，还用得着我啰里啰嗦地写这么多！\" class=\"headerlink\" title=\"啊哈，我们搞定了组件依赖问题。至此，读者可能很皱起眉头开始埋怨我了：这么简单的问题，查下 webpack 文档不就得了，还用得着我啰里啰嗦地写这么多！\"></a>啊哈，我们搞定了组件依赖问题。至此，读者可能很皱起眉头开始埋怨我了：这么简单的问题，查下 webpack 文档不就得了，还用得着我啰里啰嗦地写这么多！</h6><h6 id=\"事实上，问题往往没有我们想得那么简单！如果你将打包后的组件库以-script-标签形式直接引入，你会发现并不能正常执行，提示-vue-未定义。\"><a href=\"#事实上，问题往往没有我们想得那么简单！如果你将打包后的组件库以-script-标签形式直接引入，你会发现并不能正常执行，提示-vue-未定义。\" class=\"headerlink\" title=\"事实上，问题往往没有我们想得那么简单！如果你将打包后的组件库以 script 标签形式直接引入，你会发现并不能正常执行，提示 vue 未定义。\"></a>事实上，问题往往没有我们想得那么简单！如果你将打包后的组件库以 script 标签形式直接引入，你会发现并不能正常执行，提示 vue 未定义。</h6><h6 id=\"为了分析问题，我们将打包的代码前几行拿出来看看：\"><a href=\"#为了分析问题，我们将打包的代码前几行拿出来看看：\" class=\"headerlink\" title=\"为了分析问题，我们将打包的代码前几行拿出来看看：\"></a>为了分析问题，我们将打包的代码前几行拿出来看看：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function webpackUniversalModuleDefinition(root, factory) &#123;</span><br><span class=\"line\">    if(typeof exports === &#x27;object&#x27; &amp;&amp; typeof module === &#x27;object&#x27;)</span><br><span class=\"line\">        module.exports = factory(require(&quot;vue&quot;));</span><br><span class=\"line\">    else if(typeof define === &#x27;function&#x27; &amp;&amp; define.amd)</span><br><span class=\"line\">        define(&quot;iview&quot;, [&quot;vue&quot;], factory);</span><br><span class=\"line\">    else if(typeof exports === &#x27;object&#x27;)</span><br><span class=\"line\">        exports[&quot;iview&quot;] = factory(require(&quot;vue&quot;));</span><br><span class=\"line\">    else</span><br><span class=\"line\">        root[&quot;iview&quot;] = factory(root[&quot;vue&quot;]);</span><br><span class=\"line\">&#125;)(this, function(__WEBPACK_EXTERNAL_MODULE_157__) &#123;</span><br><span class=\"line\">    // ....</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>我们可以看见，打包后的代码以 4 种形式声明了 Vue 依赖</p>\n</blockquote>\n<h6 id=\"1-module-exports-factory-require-“vue”-commonjs2-形式；\"><a href=\"#1-module-exports-factory-require-“vue”-commonjs2-形式；\" class=\"headerlink\" title=\"1. module.exports = factory(require(“vue”)) - commonjs2 形式；\"></a>1. module.exports = factory(require(“vue”)) - commonjs2 形式；</h6><h6 id=\"2-define-“iview”-“vue”-factory-AMD-形式；\"><a href=\"#2-define-“iview”-“vue”-factory-AMD-形式；\" class=\"headerlink\" title=\"2.define(“iview”, [“vue”], factory) - AMD 形式；\"></a>2.define(“iview”, [“vue”], factory) - AMD 形式；</h6><h6 id=\"3-exports-“iview”-factory-require-“vue”-commonjs-形式；\"><a href=\"#3-exports-“iview”-factory-require-“vue”-commonjs-形式；\" class=\"headerlink\" title=\"3.exports[“iview”] = factory(require(“vue”)) - commonjs 形式；\"></a>3.exports[“iview”] = factory(require(“vue”)) - commonjs 形式；</h6><h6 id=\"4-root-“iview”-factory-root-“vue”-全局变量形式。\"><a href=\"#4-root-“iview”-factory-root-“vue”-全局变量形式。\" class=\"headerlink\" title=\"4.root[“iview”] = factory(root[“vue”]) - 全局变量形式。\"></a>4.root[“iview”] = factory(root[“vue”]) - 全局变量形式。</h6><h6 id=\"以-script-标签形式使用组件时，会同样使用-script-标签导入-Vue。Vue-导入的变量是-“window-Vue”-而不是-“window-vue”，因此会出现-vue-未定义的错误。\"><a href=\"#以-script-标签形式使用组件时，会同样使用-script-标签导入-Vue。Vue-导入的变量是-“window-Vue”-而不是-“window-vue”，因此会出现-vue-未定义的错误。\" class=\"headerlink\" title=\"以 script 标签形式使用组件时，会同样使用 script 标签导入 Vue。Vue 导入的变量是 “window.Vue” 而不是 “window.vue”，因此会出现 vue 未定义的错误。\"></a>以 script 标签形式使用组件时，会同样使用 script 标签导入 Vue。Vue 导入的变量是 “window.Vue” 而不是 “window.vue”，因此会出现 vue 未定义的错误。</h6><blockquote>\n<p>幸好，webpack 可以为各种导入形式设置不同名称，设置如下：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">externals: &#123;</span><br><span class=\"line\">    vue: &#123;</span><br><span class=\"line\">        root: &#x27;Vue&#x27;,</span><br><span class=\"line\">        commonjs: &#x27;vue&#x27;,</span><br><span class=\"line\">        commonjs2: &#x27;vue&#x27;,</span><br><span class=\"line\">        amd: &#x27;vue&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>再次打包，你可以发现打包的组件库不管是 script 标签方式还是后端构建，都可以正常工作了。</p>\n</blockquote>\n<blockquote>\n<p>最后，帖一个打包 iView 组件库的 webpack 配置：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var path = require(&#x27;path&#x27;);</span><br><span class=\"line\">var webpack = require(&#x27;webpack&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        main: &#x27;./src/index.js&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, &#x27;../dist&#x27;),</span><br><span class=\"line\">        publicPath: &#x27;/dist/&#x27;,</span><br><span class=\"line\">        filename: &#x27;iview.js&#x27;,</span><br><span class=\"line\">        library: &#x27;iview&#x27;,</span><br><span class=\"line\">        libraryTarget: &#x27;umd&#x27;,</span><br><span class=\"line\">        umdNamedDefine: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    externals: &#123;</span><br><span class=\"line\">        vue: &#123;</span><br><span class=\"line\">            root: &#x27;Vue&#x27;,</span><br><span class=\"line\">            commonjs: &#x27;vue&#x27;,</span><br><span class=\"line\">            commonjs2: &#x27;vue&#x27;,</span><br><span class=\"line\">            amd: &#x27;vue&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        extensions: [&#x27;&#x27;, &#x27;.js&#x27;, &#x27;.vue&#x27;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: /\\.vue$/,</span><br><span class=\"line\">            loader: &#x27;vue&#x27;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: /\\.js$/,</span><br><span class=\"line\">            loader: &#x27;babel&#x27;,</span><br><span class=\"line\">            exclude: /node_modules/</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: /\\.css$/,</span><br><span class=\"line\">            loader: &#x27;style!css!autoprefixer&#x27;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: /\\.less$/,</span><br><span class=\"line\">            loader: &#x27;style!css!less&#x27;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: /\\.(gif|jpg|png|woff|svg|eot|ttf)\\??.*$/,</span><br><span class=\"line\">            loader: &#x27;url?limit=8192&#x27;</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: /\\.(html|tpl)$/,</span><br><span class=\"line\">            loader: &#x27;vue-html&#x27;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.DefinePlugin(&#123;</span><br><span class=\"line\">            &#x27;process.env&#x27;: &#123;</span><br><span class=\"line\">                NODE_ENV: &#x27;&quot;development&quot;&#x27;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Hello World","date":"2018-06-01T15:27:46.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2018-06-01 23:27:46\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2023-01-28T07:13:35.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfq6ej00005riyocvb41d5s","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"从Babel 编译理解let const","date":"2020-08-28T15:59:46.000Z","_content":"\n\n<font face=\"STCAIYUN\" size=\"3\">首先let 和 const 是es6 出的，这里就要了解一下，为什么要出新语法，一般是新事物带替旧事物，必然是旧事物满足不了当前，梳理一下es5 里面的变量声明会存在哪些不足，然后再从let 和 const 上去了解他们的优点。</font>\n\n> <font face=\"STCAIYUN\" size=\"2\">es5 变量声明，也就是var 会存在的问题</font>\n\n<font face=\"STCAIYUN\" size=\"2\">1.内层变量可能会覆盖外层变量</font>\n<font face=\"STCAIYUN\" size=\"2\">2.循环中的计数变量可能会泄漏成为全局变量</font>\n\n> <font face=\"STCAIYUN\" size=\"2\">那么立足es5 本身有没有什么办法去解决呢？或者是做个块级作用域，想到作用域，js 里面只有函数存在作用域，那么就可以利用函数来实现</font>\n\n```\nvar a = 1;\n(function IIFE(){\n  var a = 2;\n  console.log(a); //2\n})()\nconsole.log(a);//1\n```\n\n> <font face=\"STCAIYUN\" size=\"2\">当在es6 中引入了块级作用域，也就是在花括号里面存在let 或者是const 时，花括号所在的区域内就是属于块级作用域了，它的优点是：</font>\n\n<font face=\"STCAIYUN\" size=\"2\">1.外层作用域无法读取内层作用的变量，也就是es5 的缺点1就不复存在了</font>\n<font face=\"STCAIYUN\" size=\"2\">2.外层声明的变量名可以与内层的相同，互不干扰，不用当心会被修改</font>\n<font face=\"STCAIYUN\" size=\"2\">3.用函数来模拟或者是立即执行函数就不在需要了</font>\n\n\n<font face=\"STCAIYUN\" size=\"2\">下面来看一组源码示例：</font>\n```\nvar x = 1;\nlet y = 1;\nif (true) {\n  var x = 2;\n  let y = 2;\n}\nconsole.log(x); // 2\nconsole.log(y); // 1\n```\n\n<font face=\"STCAIYUN\" size=\"2\">被babel 编译解析后的示例：</font>\n```\n\"use strict\";\nvar x = 1;\nvar y = 1;\n \nif (true) {\n  var x = 2;\n  var _y = 2;\n}\nconsole.log(x); // 2\n```\n\n<font face=\"STCAIYUN\" size=\"2\">上面的示例可以看出2个问题：</font>\n<font face=\"STCAIYUN\" size=\"2\">1.由于 let 使花括号提升为块级作用域，使得即使声明了相同的变量名 y 也互不干扰。  \n2.为了实现此效果，Babel 重命名了块级作用域内 let 声明的变量名，也就是可以理解为babel 在解析let 语法糖的时候就是将变量名重命名了。</font>\n\n\n<font face=\"STCAIYUN\" size=\"2\">参照:\nhttps://blog.csdn.net/weixin_34290390/article/details/87986287?utm_medium=distribute.pc_relevant.none-task-blog-title-1&spm=1001.2101.3001.4242</font>\n\n\n\n","source":"_posts/let.md","raw":"---\ntitle: 从Babel 编译理解let const \ndate: 2020-08-28 23:59:46\ntags:\n---\n\n\n<font face=\"STCAIYUN\" size=\"3\">首先let 和 const 是es6 出的，这里就要了解一下，为什么要出新语法，一般是新事物带替旧事物，必然是旧事物满足不了当前，梳理一下es5 里面的变量声明会存在哪些不足，然后再从let 和 const 上去了解他们的优点。</font>\n\n> <font face=\"STCAIYUN\" size=\"2\">es5 变量声明，也就是var 会存在的问题</font>\n\n<font face=\"STCAIYUN\" size=\"2\">1.内层变量可能会覆盖外层变量</font>\n<font face=\"STCAIYUN\" size=\"2\">2.循环中的计数变量可能会泄漏成为全局变量</font>\n\n> <font face=\"STCAIYUN\" size=\"2\">那么立足es5 本身有没有什么办法去解决呢？或者是做个块级作用域，想到作用域，js 里面只有函数存在作用域，那么就可以利用函数来实现</font>\n\n```\nvar a = 1;\n(function IIFE(){\n  var a = 2;\n  console.log(a); //2\n})()\nconsole.log(a);//1\n```\n\n> <font face=\"STCAIYUN\" size=\"2\">当在es6 中引入了块级作用域，也就是在花括号里面存在let 或者是const 时，花括号所在的区域内就是属于块级作用域了，它的优点是：</font>\n\n<font face=\"STCAIYUN\" size=\"2\">1.外层作用域无法读取内层作用的变量，也就是es5 的缺点1就不复存在了</font>\n<font face=\"STCAIYUN\" size=\"2\">2.外层声明的变量名可以与内层的相同，互不干扰，不用当心会被修改</font>\n<font face=\"STCAIYUN\" size=\"2\">3.用函数来模拟或者是立即执行函数就不在需要了</font>\n\n\n<font face=\"STCAIYUN\" size=\"2\">下面来看一组源码示例：</font>\n```\nvar x = 1;\nlet y = 1;\nif (true) {\n  var x = 2;\n  let y = 2;\n}\nconsole.log(x); // 2\nconsole.log(y); // 1\n```\n\n<font face=\"STCAIYUN\" size=\"2\">被babel 编译解析后的示例：</font>\n```\n\"use strict\";\nvar x = 1;\nvar y = 1;\n \nif (true) {\n  var x = 2;\n  var _y = 2;\n}\nconsole.log(x); // 2\n```\n\n<font face=\"STCAIYUN\" size=\"2\">上面的示例可以看出2个问题：</font>\n<font face=\"STCAIYUN\" size=\"2\">1.由于 let 使花括号提升为块级作用域，使得即使声明了相同的变量名 y 也互不干扰。  \n2.为了实现此效果，Babel 重命名了块级作用域内 let 声明的变量名，也就是可以理解为babel 在解析let 语法糖的时候就是将变量名重命名了。</font>\n\n\n<font face=\"STCAIYUN\" size=\"2\">参照:\nhttps://blog.csdn.net/weixin_34290390/article/details/87986287?utm_medium=distribute.pc_relevant.none-task-blog-title-1&spm=1001.2101.3001.4242</font>\n\n\n\n","slug":"let","published":1,"updated":"2023-01-28T07:13:35.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfq6ej20006riyo61lw4b68","content":"<p><font face=\"STCAIYUN\" size=\"3\">首先let 和 const 是es6 出的，这里就要了解一下，为什么要出新语法，一般是新事物带替旧事物，必然是旧事物满足不了当前，梳理一下es5 里面的变量声明会存在哪些不足，然后再从let 和 const 上去了解他们的优点。</font></p>\n<blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">es5 变量声明，也就是var 会存在的问题</font></p>\n</blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">1.内层变量可能会覆盖外层变量</font><br><font face=\"STCAIYUN\" size=\"2\">2.循环中的计数变量可能会泄漏成为全局变量</font></p>\n<blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">那么立足es5 本身有没有什么办法去解决呢？或者是做个块级作用域，想到作用域，js 里面只有函数存在作用域，那么就可以利用函数来实现</font></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1;</span><br><span class=\"line\">(function IIFE()&#123;</span><br><span class=\"line\">  var a = 2;</span><br><span class=\"line\">  console.log(a); //2</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">console.log(a);//1</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">当在es6 中引入了块级作用域，也就是在花括号里面存在let 或者是const 时，花括号所在的区域内就是属于块级作用域了，它的优点是：</font></p>\n</blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">1.外层作用域无法读取内层作用的变量，也就是es5 的缺点1就不复存在了</font><br><font face=\"STCAIYUN\" size=\"2\">2.外层声明的变量名可以与内层的相同，互不干扰，不用当心会被修改</font><br><font face=\"STCAIYUN\" size=\"2\">3.用函数来模拟或者是立即执行函数就不在需要了</font></p>\n<p><font face=\"STCAIYUN\" size=\"2\">下面来看一组源码示例：</font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = 1;</span><br><span class=\"line\">let y = 1;</span><br><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">  var x = 2;</span><br><span class=\"line\">  let y = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(x); // 2</span><br><span class=\"line\">console.log(y); // 1</span><br></pre></td></tr></table></figure>\n\n<p><font face=\"STCAIYUN\" size=\"2\">被babel 编译解析后的示例：</font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">var x = 1;</span><br><span class=\"line\">var y = 1;</span><br><span class=\"line\"> </span><br><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">  var x = 2;</span><br><span class=\"line\">  var _y = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(x); // 2</span><br></pre></td></tr></table></figure>\n\n<p><font face=\"STCAIYUN\" size=\"2\">上面的示例可以看出2个问题：</font><br><font face=\"STCAIYUN\" size=\"2\">1.由于 let 使花括号提升为块级作用域，使得即使声明了相同的变量名 y 也互不干扰。<br>2.为了实现此效果，Babel 重命名了块级作用域内 let 声明的变量名，也就是可以理解为babel 在解析let 语法糖的时候就是将变量名重命名了。</font></p>\n<p><font face=\"STCAIYUN\" size=\"2\">参照:<br><a href=\"https://blog.csdn.net/weixin_34290390/article/details/87986287?utm_medium=distribute.pc_relevant.none-task-blog-title-1&amp;spm=1001.2101.3001.4242\">https://blog.csdn.net/weixin_34290390/article/details/87986287?utm_medium=distribute.pc_relevant.none-task-blog-title-1&amp;spm=1001.2101.3001.4242</a></font></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font face=\"STCAIYUN\" size=\"3\">首先let 和 const 是es6 出的，这里就要了解一下，为什么要出新语法，一般是新事物带替旧事物，必然是旧事物满足不了当前，梳理一下es5 里面的变量声明会存在哪些不足，然后再从let 和 const 上去了解他们的优点。</font></p>\n<blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">es5 变量声明，也就是var 会存在的问题</font></p>\n</blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">1.内层变量可能会覆盖外层变量</font><br><font face=\"STCAIYUN\" size=\"2\">2.循环中的计数变量可能会泄漏成为全局变量</font></p>\n<blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">那么立足es5 本身有没有什么办法去解决呢？或者是做个块级作用域，想到作用域，js 里面只有函数存在作用域，那么就可以利用函数来实现</font></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1;</span><br><span class=\"line\">(function IIFE()&#123;</span><br><span class=\"line\">  var a = 2;</span><br><span class=\"line\">  console.log(a); //2</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">console.log(a);//1</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">当在es6 中引入了块级作用域，也就是在花括号里面存在let 或者是const 时，花括号所在的区域内就是属于块级作用域了，它的优点是：</font></p>\n</blockquote>\n<p><font face=\"STCAIYUN\" size=\"2\">1.外层作用域无法读取内层作用的变量，也就是es5 的缺点1就不复存在了</font><br><font face=\"STCAIYUN\" size=\"2\">2.外层声明的变量名可以与内层的相同，互不干扰，不用当心会被修改</font><br><font face=\"STCAIYUN\" size=\"2\">3.用函数来模拟或者是立即执行函数就不在需要了</font></p>\n<p><font face=\"STCAIYUN\" size=\"2\">下面来看一组源码示例：</font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = 1;</span><br><span class=\"line\">let y = 1;</span><br><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">  var x = 2;</span><br><span class=\"line\">  let y = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(x); // 2</span><br><span class=\"line\">console.log(y); // 1</span><br></pre></td></tr></table></figure>\n\n<p><font face=\"STCAIYUN\" size=\"2\">被babel 编译解析后的示例：</font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">var x = 1;</span><br><span class=\"line\">var y = 1;</span><br><span class=\"line\"> </span><br><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">  var x = 2;</span><br><span class=\"line\">  var _y = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(x); // 2</span><br></pre></td></tr></table></figure>\n\n<p><font face=\"STCAIYUN\" size=\"2\">上面的示例可以看出2个问题：</font><br><font face=\"STCAIYUN\" size=\"2\">1.由于 let 使花括号提升为块级作用域，使得即使声明了相同的变量名 y 也互不干扰。<br>2.为了实现此效果，Babel 重命名了块级作用域内 let 声明的变量名，也就是可以理解为babel 在解析let 语法糖的时候就是将变量名重命名了。</font></p>\n<p><font face=\"STCAIYUN\" size=\"2\">参照:<br><a href=\"https://blog.csdn.net/weixin_34290390/article/details/87986287?utm_medium=distribute.pc_relevant.none-task-blog-title-1&amp;spm=1001.2101.3001.4242\">https://blog.csdn.net/weixin_34290390/article/details/87986287?utm_medium=distribute.pc_relevant.none-task-blog-title-1&amp;spm=1001.2101.3001.4242</a></font></p>\n"},{"title":"JSON.stringify的魔法","date":"2020-08-25T15:27:46.000Z","_content":"JSON.stringify 是将javascript对象转换成JSON字符串;对应的还有一个JSON.parse,它是将JSON字符串转换为javascript对象，取到互补的作用；\n\n##### 日常工作中常用的场合如下：\n\n###### 1.在使用浏览器缓存的时候，先要将缓存的对象转换成JSON字符串，取出的时候再将字符串转换为对象\n\n```\nconst auth = {\n\tid:001,\n  create_time:'Wed Dec 11 2019 23:19:57 GMT+0800 (中国标准时间)',\n  name:'yy'\n}\n//存入\nlocalStorage.setItem('auth',JSON.stringify(auth));\n\n//调用\nconst currentAuth = JSON.parse(localStorage.getItem('auth'));\n\n```\n\n###### 2.判断数组中是否包含某个对象\n```\nconst data = [\n  {type:'javascript'},\n  {type:'html'},\n  {type:'css'}\n];\nJSON.stringify(data).includes(JSON.stringify({type:'css'}));//true\n\n```\n\n###### 3.判断数组/对象是否相等\n```\nconst a = [1,2,3];\nconst b = [1,2,3];\nJSON.stringify(a) == JSON.stringify(b);//true\n\n```\n\n###### 4.数据深拷贝\n```\nconst a = [1,2,3];\nconst b = JSON.parse(JSON.stringify(a));\nb[0] = 0;\nconsole.log(a,b);//[1,2,3] [0,2,3]\n\n```\n\n###### 5.数据处理\n```\n//处理前的对象\nconst todayILearn = {\n  _id: 1,\n  content: '今天学习 JSON.stringify()，我很开心！',\n  created_at: 'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)',\n  updated_at: 'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)'\n};\n//处理后的对象\nconst todayILearn = {\n  id: 1,\n  content: '今天学习 JSON.stringify()，我很开心！',\n  createdAt: 'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)',\n  updatedAt: 'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)'\n}\n\n//实现方法\n1.创建新的对象 + 遍历实现\n// 多一个变量存储\nconst todayILearnTemp = {};\nfor (const [key, value] of Object.entries(todayILearn)) {\n  if (key === \"_id\") todayILearnTemp[\"id\"] = value;\n  else if (key === \"created_at\") todayILearnTemp[\"createdAt\"] = value;\n  else if (key === \"updatedAt\") todayILearnTemp[\"updatedAt\"] = value;\n  else todayILearnTemp[key] = value;\n}\nconsole.log(todayILearnTemp);\n// 结果：\n// { id: 1,\n//  content: '今天学习 JSON.stringify()，我很开心！',\n//  createdAt: 'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)',\n//  updated_at: 'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)'\n// }\n缺点：多声明了一个变量，加了层循环，多个if else 判断\n\n2.先delete 属性，再增加属性\ntodayILearn.id = todayILearn._id;\ntodayILearn.createdAt = todayILearn.created_at;\ntodayILearn.updatedAt = todayILearn.updated_at;\ndelete todayILearn._id;\ndelete todayILearn.created_at;\ndelete todayILearn.updated_at;\nconsole.log(todayILearn);\n//     太暴力😢\n//{\n//  content: '今天学习 JSON.stringify()，我很开心！',\n//  id: 1,\n//  createdAt: 'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)',\n//  updatedAt: 'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)'\n//}\n缺点：属性的顺序发生了改变\n\n3.序列化 + replace\nconst mapObj = {\n  _id: \"id\",\n  created_at: \"createdAt\",\n  updated_at: \"updatedAt\"\n};\nJSON.parse(\n  JSON.stringify(todayILearn).replace(\n    /_id|created_at|updated_at/gi,\n    matched => mapObj[matched])\n    )\n\n// {\n// id: 1,\n//  content: '今天学习 JSON.stringify()，我很开心！',\n//  createdAt: 'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)',\n//  updatedAt: 'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)'\n// }\n\n```\n\n##### JSON.stringify 与 toString 的区别\n```\nconst a = [1,2,3];\nconsole.log(JSON.stringify(a));//\"[1,2,3]\"\nconsole.log(a.toString());//\"1,2,3\"  \n\n```\n\n>二者虽然都是转成了字符串，但是本质上还是有区别的，JSON.stringify 主要是将javascript 对象转换成字符串，偏向于操作对象类型，而toString 更偏向于数字类型转换为字符串类型\n\n>下面来看看JSON.stringify 的几大特性\n\n###### 特性1：对于undefined,任意类型函数，symbol类型的数据，分别作为对象的属性，数组中的元素，单独的值时，JSON.stringify 将返回不同的结果\n\n```\na.作为对象属性值存在，JSON.stringify 将跳过（忽略）他们，然后进行序列化\n  const data = {\n    a: \"aaa\",\n    b: undefined,\n    c: Symbol(\"dd\"),\n    fn: function() {\n      return true;\n    }\n  };\n  JSON.stringify(data); // 输出：？\n\n  // \"{\"a\":\"aaa\"}\"\n\nb.作为数组元素存在，JSON.stringify 将他们序列化为null\n  JSON.stringify([\"aaa\", undefined, function aa() {\n      return true\n    }, Symbol('dd')])  // 输出：？\n\n  // \"[\"aaa\",null,null,null]\"\n\nc.单独序列化的转换结果？？？\nJSON.stringify(function a (){console.log('a')})\n// undefined\nJSON.stringify(undefined)\n// undefined\nJSON.stringify(Symbol('dd'))\n// undefined\n\n```","source":"_posts/one.md","raw":"---\ntitle: JSON.stringify的魔法\ndate: 2020-08-25 23:27:46\ntags:\n---\nJSON.stringify 是将javascript对象转换成JSON字符串;对应的还有一个JSON.parse,它是将JSON字符串转换为javascript对象，取到互补的作用；\n\n##### 日常工作中常用的场合如下：\n\n###### 1.在使用浏览器缓存的时候，先要将缓存的对象转换成JSON字符串，取出的时候再将字符串转换为对象\n\n```\nconst auth = {\n\tid:001,\n  create_time:'Wed Dec 11 2019 23:19:57 GMT+0800 (中国标准时间)',\n  name:'yy'\n}\n//存入\nlocalStorage.setItem('auth',JSON.stringify(auth));\n\n//调用\nconst currentAuth = JSON.parse(localStorage.getItem('auth'));\n\n```\n\n###### 2.判断数组中是否包含某个对象\n```\nconst data = [\n  {type:'javascript'},\n  {type:'html'},\n  {type:'css'}\n];\nJSON.stringify(data).includes(JSON.stringify({type:'css'}));//true\n\n```\n\n###### 3.判断数组/对象是否相等\n```\nconst a = [1,2,3];\nconst b = [1,2,3];\nJSON.stringify(a) == JSON.stringify(b);//true\n\n```\n\n###### 4.数据深拷贝\n```\nconst a = [1,2,3];\nconst b = JSON.parse(JSON.stringify(a));\nb[0] = 0;\nconsole.log(a,b);//[1,2,3] [0,2,3]\n\n```\n\n###### 5.数据处理\n```\n//处理前的对象\nconst todayILearn = {\n  _id: 1,\n  content: '今天学习 JSON.stringify()，我很开心！',\n  created_at: 'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)',\n  updated_at: 'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)'\n};\n//处理后的对象\nconst todayILearn = {\n  id: 1,\n  content: '今天学习 JSON.stringify()，我很开心！',\n  createdAt: 'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)',\n  updatedAt: 'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)'\n}\n\n//实现方法\n1.创建新的对象 + 遍历实现\n// 多一个变量存储\nconst todayILearnTemp = {};\nfor (const [key, value] of Object.entries(todayILearn)) {\n  if (key === \"_id\") todayILearnTemp[\"id\"] = value;\n  else if (key === \"created_at\") todayILearnTemp[\"createdAt\"] = value;\n  else if (key === \"updatedAt\") todayILearnTemp[\"updatedAt\"] = value;\n  else todayILearnTemp[key] = value;\n}\nconsole.log(todayILearnTemp);\n// 结果：\n// { id: 1,\n//  content: '今天学习 JSON.stringify()，我很开心！',\n//  createdAt: 'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)',\n//  updated_at: 'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)'\n// }\n缺点：多声明了一个变量，加了层循环，多个if else 判断\n\n2.先delete 属性，再增加属性\ntodayILearn.id = todayILearn._id;\ntodayILearn.createdAt = todayILearn.created_at;\ntodayILearn.updatedAt = todayILearn.updated_at;\ndelete todayILearn._id;\ndelete todayILearn.created_at;\ndelete todayILearn.updated_at;\nconsole.log(todayILearn);\n//     太暴力😢\n//{\n//  content: '今天学习 JSON.stringify()，我很开心！',\n//  id: 1,\n//  createdAt: 'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)',\n//  updatedAt: 'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)'\n//}\n缺点：属性的顺序发生了改变\n\n3.序列化 + replace\nconst mapObj = {\n  _id: \"id\",\n  created_at: \"createdAt\",\n  updated_at: \"updatedAt\"\n};\nJSON.parse(\n  JSON.stringify(todayILearn).replace(\n    /_id|created_at|updated_at/gi,\n    matched => mapObj[matched])\n    )\n\n// {\n// id: 1,\n//  content: '今天学习 JSON.stringify()，我很开心！',\n//  createdAt: 'Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)',\n//  updatedAt: 'Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)'\n// }\n\n```\n\n##### JSON.stringify 与 toString 的区别\n```\nconst a = [1,2,3];\nconsole.log(JSON.stringify(a));//\"[1,2,3]\"\nconsole.log(a.toString());//\"1,2,3\"  \n\n```\n\n>二者虽然都是转成了字符串，但是本质上还是有区别的，JSON.stringify 主要是将javascript 对象转换成字符串，偏向于操作对象类型，而toString 更偏向于数字类型转换为字符串类型\n\n>下面来看看JSON.stringify 的几大特性\n\n###### 特性1：对于undefined,任意类型函数，symbol类型的数据，分别作为对象的属性，数组中的元素，单独的值时，JSON.stringify 将返回不同的结果\n\n```\na.作为对象属性值存在，JSON.stringify 将跳过（忽略）他们，然后进行序列化\n  const data = {\n    a: \"aaa\",\n    b: undefined,\n    c: Symbol(\"dd\"),\n    fn: function() {\n      return true;\n    }\n  };\n  JSON.stringify(data); // 输出：？\n\n  // \"{\"a\":\"aaa\"}\"\n\nb.作为数组元素存在，JSON.stringify 将他们序列化为null\n  JSON.stringify([\"aaa\", undefined, function aa() {\n      return true\n    }, Symbol('dd')])  // 输出：？\n\n  // \"[\"aaa\",null,null,null]\"\n\nc.单独序列化的转换结果？？？\nJSON.stringify(function a (){console.log('a')})\n// undefined\nJSON.stringify(undefined)\n// undefined\nJSON.stringify(Symbol('dd'))\n// undefined\n\n```","slug":"one","published":1,"updated":"2023-01-28T07:13:35.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfq6ej30007riyo2urzcc5j","content":"<p>JSON.stringify 是将javascript对象转换成JSON字符串;对应的还有一个JSON.parse,它是将JSON字符串转换为javascript对象，取到互补的作用；</p>\n<h5 id=\"日常工作中常用的场合如下：\"><a href=\"#日常工作中常用的场合如下：\" class=\"headerlink\" title=\"日常工作中常用的场合如下：\"></a>日常工作中常用的场合如下：</h5><h6 id=\"1-在使用浏览器缓存的时候，先要将缓存的对象转换成JSON字符串，取出的时候再将字符串转换为对象\"><a href=\"#1-在使用浏览器缓存的时候，先要将缓存的对象转换成JSON字符串，取出的时候再将字符串转换为对象\" class=\"headerlink\" title=\"1.在使用浏览器缓存的时候，先要将缓存的对象转换成JSON字符串，取出的时候再将字符串转换为对象\"></a>1.在使用浏览器缓存的时候，先要将缓存的对象转换成JSON字符串，取出的时候再将字符串转换为对象</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const auth = &#123;</span><br><span class=\"line\">\tid:001,</span><br><span class=\"line\">  create_time:&#x27;Wed Dec 11 2019 23:19:57 GMT+0800 (中国标准时间)&#x27;,</span><br><span class=\"line\">  name:&#x27;yy&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//存入</span><br><span class=\"line\">localStorage.setItem(&#x27;auth&#x27;,JSON.stringify(auth));</span><br><span class=\"line\"></span><br><span class=\"line\">//调用</span><br><span class=\"line\">const currentAuth = JSON.parse(localStorage.getItem(&#x27;auth&#x27;));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-判断数组中是否包含某个对象\"><a href=\"#2-判断数组中是否包含某个对象\" class=\"headerlink\" title=\"2.判断数组中是否包含某个对象\"></a>2.判断数组中是否包含某个对象</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const data = [</span><br><span class=\"line\">  &#123;type:&#x27;javascript&#x27;&#125;,</span><br><span class=\"line\">  &#123;type:&#x27;html&#x27;&#125;,</span><br><span class=\"line\">  &#123;type:&#x27;css&#x27;&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">JSON.stringify(data).includes(JSON.stringify(&#123;type:&#x27;css&#x27;&#125;));//true</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3-判断数组-对象是否相等\"><a href=\"#3-判断数组-对象是否相等\" class=\"headerlink\" title=\"3.判断数组/对象是否相等\"></a>3.判断数组/对象是否相等</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = [1,2,3];</span><br><span class=\"line\">const b = [1,2,3];</span><br><span class=\"line\">JSON.stringify(a) == JSON.stringify(b);//true</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"4-数据深拷贝\"><a href=\"#4-数据深拷贝\" class=\"headerlink\" title=\"4.数据深拷贝\"></a>4.数据深拷贝</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = [1,2,3];</span><br><span class=\"line\">const b = JSON.parse(JSON.stringify(a));</span><br><span class=\"line\">b[0] = 0;</span><br><span class=\"line\">console.log(a,b);//[1,2,3] [0,2,3]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"5-数据处理\"><a href=\"#5-数据处理\" class=\"headerlink\" title=\"5.数据处理\"></a>5.数据处理</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//处理前的对象</span><br><span class=\"line\">const todayILearn = &#123;</span><br><span class=\"line\">  _id: 1,</span><br><span class=\"line\">  content: &#x27;今天学习 JSON.stringify()，我很开心！&#x27;,</span><br><span class=\"line\">  created_at: &#x27;Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)&#x27;,</span><br><span class=\"line\">  updated_at: &#x27;Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)&#x27;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//处理后的对象</span><br><span class=\"line\">const todayILearn = &#123;</span><br><span class=\"line\">  id: 1,</span><br><span class=\"line\">  content: &#x27;今天学习 JSON.stringify()，我很开心！&#x27;,</span><br><span class=\"line\">  createdAt: &#x27;Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)&#x27;,</span><br><span class=\"line\">  updatedAt: &#x27;Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//实现方法</span><br><span class=\"line\">1.创建新的对象 + 遍历实现</span><br><span class=\"line\">// 多一个变量存储</span><br><span class=\"line\">const todayILearnTemp = &#123;&#125;;</span><br><span class=\"line\">for (const [key, value] of Object.entries(todayILearn)) &#123;</span><br><span class=\"line\">  if (key === &quot;_id&quot;) todayILearnTemp[&quot;id&quot;] = value;</span><br><span class=\"line\">  else if (key === &quot;created_at&quot;) todayILearnTemp[&quot;createdAt&quot;] = value;</span><br><span class=\"line\">  else if (key === &quot;updatedAt&quot;) todayILearnTemp[&quot;updatedAt&quot;] = value;</span><br><span class=\"line\">  else todayILearnTemp[key] = value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(todayILearnTemp);</span><br><span class=\"line\">// 结果：</span><br><span class=\"line\">// &#123; id: 1,</span><br><span class=\"line\">//  content: &#x27;今天学习 JSON.stringify()，我很开心！&#x27;,</span><br><span class=\"line\">//  createdAt: &#x27;Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)&#x27;,</span><br><span class=\"line\">//  updated_at: &#x27;Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)&#x27;</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\">缺点：多声明了一个变量，加了层循环，多个if else 判断</span><br><span class=\"line\"></span><br><span class=\"line\">2.先delete 属性，再增加属性</span><br><span class=\"line\">todayILearn.id = todayILearn._id;</span><br><span class=\"line\">todayILearn.createdAt = todayILearn.created_at;</span><br><span class=\"line\">todayILearn.updatedAt = todayILearn.updated_at;</span><br><span class=\"line\">delete todayILearn._id;</span><br><span class=\"line\">delete todayILearn.created_at;</span><br><span class=\"line\">delete todayILearn.updated_at;</span><br><span class=\"line\">console.log(todayILearn);</span><br><span class=\"line\">//     太暴力😢</span><br><span class=\"line\">//&#123;</span><br><span class=\"line\">//  content: &#x27;今天学习 JSON.stringify()，我很开心！&#x27;,</span><br><span class=\"line\">//  id: 1,</span><br><span class=\"line\">//  createdAt: &#x27;Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)&#x27;,</span><br><span class=\"line\">//  updatedAt: &#x27;Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)&#x27;</span><br><span class=\"line\">//&#125;</span><br><span class=\"line\">缺点：属性的顺序发生了改变</span><br><span class=\"line\"></span><br><span class=\"line\">3.序列化 + replace</span><br><span class=\"line\">const mapObj = &#123;</span><br><span class=\"line\">  _id: &quot;id&quot;,</span><br><span class=\"line\">  created_at: &quot;createdAt&quot;,</span><br><span class=\"line\">  updated_at: &quot;updatedAt&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">JSON.parse(</span><br><span class=\"line\">  JSON.stringify(todayILearn).replace(</span><br><span class=\"line\">    /_id|created_at|updated_at/gi,</span><br><span class=\"line\">    matched =&gt; mapObj[matched])</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">// &#123;</span><br><span class=\"line\">// id: 1,</span><br><span class=\"line\">//  content: &#x27;今天学习 JSON.stringify()，我很开心！&#x27;,</span><br><span class=\"line\">//  createdAt: &#x27;Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)&#x27;,</span><br><span class=\"line\">//  updatedAt: &#x27;Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)&#x27;</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"JSON-stringify-与-toString-的区别\"><a href=\"#JSON-stringify-与-toString-的区别\" class=\"headerlink\" title=\"JSON.stringify 与 toString 的区别\"></a>JSON.stringify 与 toString 的区别</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = [1,2,3];</span><br><span class=\"line\">console.log(JSON.stringify(a));//&quot;[1,2,3]&quot;</span><br><span class=\"line\">console.log(a.toString());//&quot;1,2,3&quot;  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>二者虽然都是转成了字符串，但是本质上还是有区别的，JSON.stringify 主要是将javascript 对象转换成字符串，偏向于操作对象类型，而toString 更偏向于数字类型转换为字符串类型</p>\n</blockquote>\n<blockquote>\n<p>下面来看看JSON.stringify 的几大特性</p>\n</blockquote>\n<h6 id=\"特性1：对于undefined-任意类型函数，symbol类型的数据，分别作为对象的属性，数组中的元素，单独的值时，JSON-stringify-将返回不同的结果\"><a href=\"#特性1：对于undefined-任意类型函数，symbol类型的数据，分别作为对象的属性，数组中的元素，单独的值时，JSON-stringify-将返回不同的结果\" class=\"headerlink\" title=\"特性1：对于undefined,任意类型函数，symbol类型的数据，分别作为对象的属性，数组中的元素，单独的值时，JSON.stringify 将返回不同的结果\"></a>特性1：对于undefined,任意类型函数，symbol类型的数据，分别作为对象的属性，数组中的元素，单独的值时，JSON.stringify 将返回不同的结果</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.作为对象属性值存在，JSON.stringify 将跳过（忽略）他们，然后进行序列化</span><br><span class=\"line\">  const data = &#123;</span><br><span class=\"line\">    a: &quot;aaa&quot;,</span><br><span class=\"line\">    b: undefined,</span><br><span class=\"line\">    c: Symbol(&quot;dd&quot;),</span><br><span class=\"line\">    fn: function() &#123;</span><br><span class=\"line\">      return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  JSON.stringify(data); // 输出：？</span><br><span class=\"line\"></span><br><span class=\"line\">  // &quot;&#123;&quot;a&quot;:&quot;aaa&quot;&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">b.作为数组元素存在，JSON.stringify 将他们序列化为null</span><br><span class=\"line\">  JSON.stringify([&quot;aaa&quot;, undefined, function aa() &#123;</span><br><span class=\"line\">      return true</span><br><span class=\"line\">    &#125;, Symbol(&#x27;dd&#x27;)])  // 输出：？</span><br><span class=\"line\"></span><br><span class=\"line\">  // &quot;[&quot;aaa&quot;,null,null,null]&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">c.单独序列化的转换结果？？？</span><br><span class=\"line\">JSON.stringify(function a ()&#123;console.log(&#x27;a&#x27;)&#125;)</span><br><span class=\"line\">// undefined</span><br><span class=\"line\">JSON.stringify(undefined)</span><br><span class=\"line\">// undefined</span><br><span class=\"line\">JSON.stringify(Symbol(&#x27;dd&#x27;))</span><br><span class=\"line\">// undefined</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>JSON.stringify 是将javascript对象转换成JSON字符串;对应的还有一个JSON.parse,它是将JSON字符串转换为javascript对象，取到互补的作用；</p>\n<h5 id=\"日常工作中常用的场合如下：\"><a href=\"#日常工作中常用的场合如下：\" class=\"headerlink\" title=\"日常工作中常用的场合如下：\"></a>日常工作中常用的场合如下：</h5><h6 id=\"1-在使用浏览器缓存的时候，先要将缓存的对象转换成JSON字符串，取出的时候再将字符串转换为对象\"><a href=\"#1-在使用浏览器缓存的时候，先要将缓存的对象转换成JSON字符串，取出的时候再将字符串转换为对象\" class=\"headerlink\" title=\"1.在使用浏览器缓存的时候，先要将缓存的对象转换成JSON字符串，取出的时候再将字符串转换为对象\"></a>1.在使用浏览器缓存的时候，先要将缓存的对象转换成JSON字符串，取出的时候再将字符串转换为对象</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const auth = &#123;</span><br><span class=\"line\">\tid:001,</span><br><span class=\"line\">  create_time:&#x27;Wed Dec 11 2019 23:19:57 GMT+0800 (中国标准时间)&#x27;,</span><br><span class=\"line\">  name:&#x27;yy&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//存入</span><br><span class=\"line\">localStorage.setItem(&#x27;auth&#x27;,JSON.stringify(auth));</span><br><span class=\"line\"></span><br><span class=\"line\">//调用</span><br><span class=\"line\">const currentAuth = JSON.parse(localStorage.getItem(&#x27;auth&#x27;));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-判断数组中是否包含某个对象\"><a href=\"#2-判断数组中是否包含某个对象\" class=\"headerlink\" title=\"2.判断数组中是否包含某个对象\"></a>2.判断数组中是否包含某个对象</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const data = [</span><br><span class=\"line\">  &#123;type:&#x27;javascript&#x27;&#125;,</span><br><span class=\"line\">  &#123;type:&#x27;html&#x27;&#125;,</span><br><span class=\"line\">  &#123;type:&#x27;css&#x27;&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">JSON.stringify(data).includes(JSON.stringify(&#123;type:&#x27;css&#x27;&#125;));//true</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3-判断数组-对象是否相等\"><a href=\"#3-判断数组-对象是否相等\" class=\"headerlink\" title=\"3.判断数组/对象是否相等\"></a>3.判断数组/对象是否相等</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = [1,2,3];</span><br><span class=\"line\">const b = [1,2,3];</span><br><span class=\"line\">JSON.stringify(a) == JSON.stringify(b);//true</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"4-数据深拷贝\"><a href=\"#4-数据深拷贝\" class=\"headerlink\" title=\"4.数据深拷贝\"></a>4.数据深拷贝</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = [1,2,3];</span><br><span class=\"line\">const b = JSON.parse(JSON.stringify(a));</span><br><span class=\"line\">b[0] = 0;</span><br><span class=\"line\">console.log(a,b);//[1,2,3] [0,2,3]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"5-数据处理\"><a href=\"#5-数据处理\" class=\"headerlink\" title=\"5.数据处理\"></a>5.数据处理</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//处理前的对象</span><br><span class=\"line\">const todayILearn = &#123;</span><br><span class=\"line\">  _id: 1,</span><br><span class=\"line\">  content: &#x27;今天学习 JSON.stringify()，我很开心！&#x27;,</span><br><span class=\"line\">  created_at: &#x27;Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)&#x27;,</span><br><span class=\"line\">  updated_at: &#x27;Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)&#x27;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//处理后的对象</span><br><span class=\"line\">const todayILearn = &#123;</span><br><span class=\"line\">  id: 1,</span><br><span class=\"line\">  content: &#x27;今天学习 JSON.stringify()，我很开心！&#x27;,</span><br><span class=\"line\">  createdAt: &#x27;Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)&#x27;,</span><br><span class=\"line\">  updatedAt: &#x27;Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//实现方法</span><br><span class=\"line\">1.创建新的对象 + 遍历实现</span><br><span class=\"line\">// 多一个变量存储</span><br><span class=\"line\">const todayILearnTemp = &#123;&#125;;</span><br><span class=\"line\">for (const [key, value] of Object.entries(todayILearn)) &#123;</span><br><span class=\"line\">  if (key === &quot;_id&quot;) todayILearnTemp[&quot;id&quot;] = value;</span><br><span class=\"line\">  else if (key === &quot;created_at&quot;) todayILearnTemp[&quot;createdAt&quot;] = value;</span><br><span class=\"line\">  else if (key === &quot;updatedAt&quot;) todayILearnTemp[&quot;updatedAt&quot;] = value;</span><br><span class=\"line\">  else todayILearnTemp[key] = value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(todayILearnTemp);</span><br><span class=\"line\">// 结果：</span><br><span class=\"line\">// &#123; id: 1,</span><br><span class=\"line\">//  content: &#x27;今天学习 JSON.stringify()，我很开心！&#x27;,</span><br><span class=\"line\">//  createdAt: &#x27;Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)&#x27;,</span><br><span class=\"line\">//  updated_at: &#x27;Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)&#x27;</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\">缺点：多声明了一个变量，加了层循环，多个if else 判断</span><br><span class=\"line\"></span><br><span class=\"line\">2.先delete 属性，再增加属性</span><br><span class=\"line\">todayILearn.id = todayILearn._id;</span><br><span class=\"line\">todayILearn.createdAt = todayILearn.created_at;</span><br><span class=\"line\">todayILearn.updatedAt = todayILearn.updated_at;</span><br><span class=\"line\">delete todayILearn._id;</span><br><span class=\"line\">delete todayILearn.created_at;</span><br><span class=\"line\">delete todayILearn.updated_at;</span><br><span class=\"line\">console.log(todayILearn);</span><br><span class=\"line\">//     太暴力😢</span><br><span class=\"line\">//&#123;</span><br><span class=\"line\">//  content: &#x27;今天学习 JSON.stringify()，我很开心！&#x27;,</span><br><span class=\"line\">//  id: 1,</span><br><span class=\"line\">//  createdAt: &#x27;Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)&#x27;,</span><br><span class=\"line\">//  updatedAt: &#x27;Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)&#x27;</span><br><span class=\"line\">//&#125;</span><br><span class=\"line\">缺点：属性的顺序发生了改变</span><br><span class=\"line\"></span><br><span class=\"line\">3.序列化 + replace</span><br><span class=\"line\">const mapObj = &#123;</span><br><span class=\"line\">  _id: &quot;id&quot;,</span><br><span class=\"line\">  created_at: &quot;createdAt&quot;,</span><br><span class=\"line\">  updated_at: &quot;updatedAt&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">JSON.parse(</span><br><span class=\"line\">  JSON.stringify(todayILearn).replace(</span><br><span class=\"line\">    /_id|created_at|updated_at/gi,</span><br><span class=\"line\">    matched =&gt; mapObj[matched])</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">// &#123;</span><br><span class=\"line\">// id: 1,</span><br><span class=\"line\">//  content: &#x27;今天学习 JSON.stringify()，我很开心！&#x27;,</span><br><span class=\"line\">//  createdAt: &#x27;Mon Nov 25 2019 14:03:55 GMT+0800 (中国标准时间)&#x27;,</span><br><span class=\"line\">//  updatedAt: &#x27;Mon Nov 25 2019 16:03:55 GMT+0800 (中国标准时间)&#x27;</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"JSON-stringify-与-toString-的区别\"><a href=\"#JSON-stringify-与-toString-的区别\" class=\"headerlink\" title=\"JSON.stringify 与 toString 的区别\"></a>JSON.stringify 与 toString 的区别</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = [1,2,3];</span><br><span class=\"line\">console.log(JSON.stringify(a));//&quot;[1,2,3]&quot;</span><br><span class=\"line\">console.log(a.toString());//&quot;1,2,3&quot;  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>二者虽然都是转成了字符串，但是本质上还是有区别的，JSON.stringify 主要是将javascript 对象转换成字符串，偏向于操作对象类型，而toString 更偏向于数字类型转换为字符串类型</p>\n</blockquote>\n<blockquote>\n<p>下面来看看JSON.stringify 的几大特性</p>\n</blockquote>\n<h6 id=\"特性1：对于undefined-任意类型函数，symbol类型的数据，分别作为对象的属性，数组中的元素，单独的值时，JSON-stringify-将返回不同的结果\"><a href=\"#特性1：对于undefined-任意类型函数，symbol类型的数据，分别作为对象的属性，数组中的元素，单独的值时，JSON-stringify-将返回不同的结果\" class=\"headerlink\" title=\"特性1：对于undefined,任意类型函数，symbol类型的数据，分别作为对象的属性，数组中的元素，单独的值时，JSON.stringify 将返回不同的结果\"></a>特性1：对于undefined,任意类型函数，symbol类型的数据，分别作为对象的属性，数组中的元素，单独的值时，JSON.stringify 将返回不同的结果</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.作为对象属性值存在，JSON.stringify 将跳过（忽略）他们，然后进行序列化</span><br><span class=\"line\">  const data = &#123;</span><br><span class=\"line\">    a: &quot;aaa&quot;,</span><br><span class=\"line\">    b: undefined,</span><br><span class=\"line\">    c: Symbol(&quot;dd&quot;),</span><br><span class=\"line\">    fn: function() &#123;</span><br><span class=\"line\">      return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  JSON.stringify(data); // 输出：？</span><br><span class=\"line\"></span><br><span class=\"line\">  // &quot;&#123;&quot;a&quot;:&quot;aaa&quot;&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">b.作为数组元素存在，JSON.stringify 将他们序列化为null</span><br><span class=\"line\">  JSON.stringify([&quot;aaa&quot;, undefined, function aa() &#123;</span><br><span class=\"line\">      return true</span><br><span class=\"line\">    &#125;, Symbol(&#x27;dd&#x27;)])  // 输出：？</span><br><span class=\"line\"></span><br><span class=\"line\">  // &quot;[&quot;aaa&quot;,null,null,null]&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">c.单独序列化的转换结果？？？</span><br><span class=\"line\">JSON.stringify(function a ()&#123;console.log(&#x27;a&#x27;)&#125;)</span><br><span class=\"line\">// undefined</span><br><span class=\"line\">JSON.stringify(undefined)</span><br><span class=\"line\">// undefined</span><br><span class=\"line\">JSON.stringify(Symbol(&#x27;dd&#x27;))</span><br><span class=\"line\">// undefined</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"CSS盒模型","date":"2018-07-24T15:27:46.000Z","_content":"\n##### 1.盒模型的概念\n\ncss盒模型是指所有HTML元素都可以做看作是一个盒子，从内到外由内容（content），内边距（padding），边框（border），外边距（margin）组成\n\n\n##### 2.盒模型的种类\n\n```\nbox-sizing=conten-box; //标准盒子模型\nbox-sizing=border-box; //IE盒子模型\n```\n\n![](https://cdn.nlark.com/yuque/0/2020/jpeg/2311579/1596783142768-cc4728ce-8829-419a-a18c-db9199d608ea.jpeg)\n• 标准盒模型，设置的width或height是对实际内容（content）的width或height进行设置，内容周围的border和padding另外设置，即盒子模型的width（height）=设置的content的宽高+padding+border+margin\n注：除内容content外，其他为上下左右都有\n• IE盒子模型，设置的width或height是对 实际内容（content）+内边距（padding）+边框（border）之和的width和height进行设置的，其盒模型的width（height）=设置的width（height）+外边距margin\n\n\n##### 3、box-sizing的应用\n\nbox-sizing 属性允许您以特定的方式定义匹配某个区域的特定元素（个人认为可以理解为指定盒模型的类型，即上述两种类型）\n• box-sizing值为content-box时：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框（即标准盒模型）\n• box-sizing值为border-box时：为元素设定的宽度和高度决定了元素的边框盒，就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制，通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度（即 IE盒模型）\n• box-sizing值为inherit时：规定应从父元素继承 box-sizing 属性的值\n","source":"_posts/two.md","raw":"---\ntitle: CSS盒模型\ndate: 2018-07-24 23:27:46\ntags:\n---\n\n##### 1.盒模型的概念\n\ncss盒模型是指所有HTML元素都可以做看作是一个盒子，从内到外由内容（content），内边距（padding），边框（border），外边距（margin）组成\n\n\n##### 2.盒模型的种类\n\n```\nbox-sizing=conten-box; //标准盒子模型\nbox-sizing=border-box; //IE盒子模型\n```\n\n![](https://cdn.nlark.com/yuque/0/2020/jpeg/2311579/1596783142768-cc4728ce-8829-419a-a18c-db9199d608ea.jpeg)\n• 标准盒模型，设置的width或height是对实际内容（content）的width或height进行设置，内容周围的border和padding另外设置，即盒子模型的width（height）=设置的content的宽高+padding+border+margin\n注：除内容content外，其他为上下左右都有\n• IE盒子模型，设置的width或height是对 实际内容（content）+内边距（padding）+边框（border）之和的width和height进行设置的，其盒模型的width（height）=设置的width（height）+外边距margin\n\n\n##### 3、box-sizing的应用\n\nbox-sizing 属性允许您以特定的方式定义匹配某个区域的特定元素（个人认为可以理解为指定盒模型的类型，即上述两种类型）\n• box-sizing值为content-box时：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框（即标准盒模型）\n• box-sizing值为border-box时：为元素设定的宽度和高度决定了元素的边框盒，就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制，通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度（即 IE盒模型）\n• box-sizing值为inherit时：规定应从父元素继承 box-sizing 属性的值\n","slug":"two","published":1,"updated":"2023-01-28T07:13:35.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfq6ej50008riyoftqvefqs","content":"<h5 id=\"1-盒模型的概念\"><a href=\"#1-盒模型的概念\" class=\"headerlink\" title=\"1.盒模型的概念\"></a>1.盒模型的概念</h5><p>css盒模型是指所有HTML元素都可以做看作是一个盒子，从内到外由内容（content），内边距（padding），边框（border），外边距（margin）组成</p>\n<h5 id=\"2-盒模型的种类\"><a href=\"#2-盒模型的种类\" class=\"headerlink\" title=\"2.盒模型的种类\"></a>2.盒模型的种类</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">box-sizing=conten-box; //标准盒子模型</span><br><span class=\"line\">box-sizing=border-box; //IE盒子模型</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/2311579/1596783142768-cc4728ce-8829-419a-a18c-db9199d608ea.jpeg\"><br>• 标准盒模型，设置的width或height是对实际内容（content）的width或height进行设置，内容周围的border和padding另外设置，即盒子模型的width（height）=设置的content的宽高+padding+border+margin<br>注：除内容content外，其他为上下左右都有<br>• IE盒子模型，设置的width或height是对 实际内容（content）+内边距（padding）+边框（border）之和的width和height进行设置的，其盒模型的width（height）=设置的width（height）+外边距margin</p>\n<h5 id=\"3、box-sizing的应用\"><a href=\"#3、box-sizing的应用\" class=\"headerlink\" title=\"3、box-sizing的应用\"></a>3、box-sizing的应用</h5><p>box-sizing 属性允许您以特定的方式定义匹配某个区域的特定元素（个人认为可以理解为指定盒模型的类型，即上述两种类型）<br>• box-sizing值为content-box时：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框（即标准盒模型）<br>• box-sizing值为border-box时：为元素设定的宽度和高度决定了元素的边框盒，就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制，通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度（即 IE盒模型）<br>• box-sizing值为inherit时：规定应从父元素继承 box-sizing 属性的值</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"1-盒模型的概念\"><a href=\"#1-盒模型的概念\" class=\"headerlink\" title=\"1.盒模型的概念\"></a>1.盒模型的概念</h5><p>css盒模型是指所有HTML元素都可以做看作是一个盒子，从内到外由内容（content），内边距（padding），边框（border），外边距（margin）组成</p>\n<h5 id=\"2-盒模型的种类\"><a href=\"#2-盒模型的种类\" class=\"headerlink\" title=\"2.盒模型的种类\"></a>2.盒模型的种类</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">box-sizing=conten-box; //标准盒子模型</span><br><span class=\"line\">box-sizing=border-box; //IE盒子模型</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/2311579/1596783142768-cc4728ce-8829-419a-a18c-db9199d608ea.jpeg\"><br>• 标准盒模型，设置的width或height是对实际内容（content）的width或height进行设置，内容周围的border和padding另外设置，即盒子模型的width（height）=设置的content的宽高+padding+border+margin<br>注：除内容content外，其他为上下左右都有<br>• IE盒子模型，设置的width或height是对 实际内容（content）+内边距（padding）+边框（border）之和的width和height进行设置的，其盒模型的width（height）=设置的width（height）+外边距margin</p>\n<h5 id=\"3、box-sizing的应用\"><a href=\"#3、box-sizing的应用\" class=\"headerlink\" title=\"3、box-sizing的应用\"></a>3、box-sizing的应用</h5><p>box-sizing 属性允许您以特定的方式定义匹配某个区域的特定元素（个人认为可以理解为指定盒模型的类型，即上述两种类型）<br>• box-sizing值为content-box时：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框（即标准盒模型）<br>• box-sizing值为border-box时：为元素设定的宽度和高度决定了元素的边框盒，就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制，通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度（即 IE盒模型）<br>• box-sizing值为inherit时：规定应从父元素继承 box-sizing 属性的值</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}